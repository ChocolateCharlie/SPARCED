#ifndef _amici_TPL_MODELNAME_h
#define _amici_TPL_MODELNAME_h
#include <cmath>
#include <memory>

#include "amici/model_ode.h"
#include "amici/solver_cvodes.h"

#include "sundials/sundials_types.h"

namespace amici {
class Solver;
}

/**
 * @brief Wrapper function to instantiate the linked Amici model without knowing
 * the name at compile time.
 * @return
 */
extern void J_SPARCED_Brep(realtype *J, const realtype t, const realtype *x,
                            const realtype *p, const realtype *k,
                            const realtype *h, const realtype *w,
                            const realtype *dwdx);
extern void JB_SPARCED_Brep(realtype *JB, const realtype t, const realtype *x,
                             const realtype *p, const realtype *k,
                             const realtype *h, const realtype *xB,
                             const realtype *w, const realtype *dwdx);
extern void JDiag_SPARCED_Brep(realtype *JDiag, const realtype t,
                                const realtype *x, const realtype *p,
                                const realtype *k, const realtype *h,
                                const realtype *w, const realtype *dwdx);
extern void JSparse_SPARCED_Brep(realtype *JSparse, const realtype t, const realtype *x, const realtype *p, const realtype *k, const realtype *h, const realtype *w, const realtype *dwdx);
extern void JSparse_colptrs_SPARCED_Brep(sunindextype *colptrs);
extern void JSparse_rowvals_SPARCED_Brep(sunindextype *rowvals);
extern void JSparseB_SPARCED_Brep(realtype *JSparseB, const realtype t, const realtype *x, const realtype *p, const realtype *k, const realtype *h, const realtype *xB, const realtype *w, const realtype *dwdx);
extern void JSparseB_colptrs_SPARCED_Brep(sunindextype *colptrs);
extern void JSparseB_rowvals_SPARCED_Brep(sunindextype *rowvals);
extern void Jy_SPARCED_Brep(realtype *nllh, const int iy, const realtype *p,
                             const realtype *k, const realtype *y,
                             const realtype *sigmay, const realtype *my);
extern void dJydsigmay_SPARCED_Brep(realtype *dJydsigmay, const int iy,
                                     const realtype *p, const realtype *k,
                                     const realtype *y, const realtype *sigmay,
                                     const realtype *my);
extern void dJydy_SPARCED_Brep(realtype *dJydy, const int iy, const realtype *p, const realtype *k, const realtype *y, const realtype *sigmay, const realtype *my);
extern void dJydy_colptrs_SPARCED_Brep(sunindextype *colptrs, int index);
extern void dJydy_rowvals_SPARCED_Brep(sunindextype *rowvals, int index);
extern void dwdp_SPARCED_Brep(realtype *dwdp, const realtype t, const realtype *x, const realtype *p, const realtype *k, const realtype *h, const realtype *w, const realtype *tcl, const realtype *dtcldp, const int ip);
extern void dwdx_SPARCED_Brep(realtype *dwdx, const realtype t, const realtype *x, const realtype *p, const realtype *k, const realtype *h, const realtype *w, const realtype *tcl);
extern void dwdx_colptrs_SPARCED_Brep(sunindextype *colptrs);
extern void dwdx_rowvals_SPARCED_Brep(sunindextype *rowvals);
extern void dxdotdw_SPARCED_Brep(realtype *dxdotdw, const realtype t, const realtype *x, const realtype *p, const realtype *k, const realtype *h, const realtype *w);
extern void dxdotdw_colptrs_SPARCED_Brep(sunindextype *colptrs);
extern void dxdotdw_rowvals_SPARCED_Brep(sunindextype *rowvals);
extern void dxdotdp_SPARCED_Brep(realtype *dxdotdp, const realtype t, const realtype *x, const realtype *p, const realtype *k, const realtype *h, const int ip, const realtype *w);
extern void dydx_SPARCED_Brep(realtype *dydx, const realtype t,
                               const realtype *x, const realtype *p,
                               const realtype *k, const realtype *h,
                               const realtype *w, const realtype *dwdx);
extern void dydp_SPARCED_Brep(realtype *dydp, const realtype t,
                               const realtype *x, const realtype *p,
                               const realtype *k, const realtype *h,
                               const int ip, const realtype *w,
                               const realtype *dwp);
extern void dsigmaydp_SPARCED_Brep(realtype *dsigmaydp, const realtype t,
                                    const realtype *p, const realtype *k,
                                    const int ip);
extern void sigmay_SPARCED_Brep(realtype *sigmay, const realtype t,
                                 const realtype *p, const realtype *k);
extern void w_SPARCED_Brep(realtype *w, const realtype t, const realtype *x, const realtype *p, const realtype *k, const realtype *h, const realtype *tcl);
extern void x0_SPARCED_Brep(realtype *x0, const realtype t, const realtype *p,
                             const realtype *k);
extern void x0_fixedParameters_SPARCED_Brep(realtype *x0, const realtype t,
                                             const realtype *p,
                                             const realtype *k);
extern void sx0_SPARCED_Brep(realtype *sx0, const realtype t,
                              const realtype *x0, const realtype *p,
                              const realtype *k, const int ip);
extern void sx0_fixedParameters_SPARCED_Brep(realtype *sx0, const realtype t,
                                              const realtype *x0,
                                              const realtype *p,
                                              const realtype *k, const int ip);
extern void xdot_SPARCED_Brep(realtype *xdot, const realtype t,
                               const realtype *x, const realtype *p,
                               const realtype *k, const realtype *h,
                               const realtype *w);
extern void y_SPARCED_Brep(realtype *y, const realtype t, const realtype *x,
                            const realtype *p, const realtype *k,
                            const realtype *h, const realtype *w);

extern void x_solver_SPARCED_Brep(realtype *x_solver, const realtype *x_rdata);
extern void total_cl_SPARCED_Brep(realtype *total_cl, const realtype *x_rdata);

/**
 * @brief AMICI-generated model subclass.
 */
class Model_SPARCED_Brep : public amici::Model_ODE {
  public:
    /**
     * @brief Default constructor.
     */
    Model_SPARCED_Brep()
        : amici::Model_ODE(
              774,                                // nx_rdata
              774,                            // nxtrue_rdata
              774,                               // nx_solver
              774,                           // nxtrue_solver
              3,                                      // ny
              3,                                  // nytrue
              0,                                      // nz
              0,                                  // nztrue
              0,                                  // nevent
              1,                              // nobjective
              2441,                                      // nw
              3007,                                   // ndwdx
              0,                                   // ndwdp
              5121,                                // ndxdotdw
              std::vector<int>{1,1,1},                                  // ndjydy
              4477,                                     // nnz
              774,                                     // ubw
              774,                                     // lbw
              amici::SecondOrderMode::none,                                  // o2mode
              std::vector<realtype>{},       // dynamic parameters
              std::vector<realtype>{0.0042005, 0.04, 5.0, 4.864145, 2.22319e-06, 140.7475, 0.002529984, 100.0, 5.004356, 0.0225196, 0.0158124, 100.0, 0.1563861, 0.0006324961, 100.0, 0.00453508, 0.0009487441, 100.0, 0.02177823, 0.0006324961, 100.0, 70.1487, 0.005376217, 4.391771, 0.005376217, 4.391771, 0.005376217, 4.391771, 0.005376217, 26.9259, 0.01181584, 10.0, 200.0, 0.001897488, 100.0, 26.9259, 0.01181584, 10.0, 200.0, 0.000316248, 100.0, 26.9259, 0.01181584, 10.0, 200.0, 0.0006324961, 100.0, 0.1274, 10.0, 200.0, 0.005376217, 0.1274, 10.0, 200.0, 0.005376217, 13.1753, 0.005376217, 11.4186, 0.005376217, 9.2227, 0.005376217, 10.5402, 0.005376217, 0.03294, 10.0, 200.0, 0.005376217, 70.2683, 0.0878, 10.0, 200.0, 0.005376217, 9.6619, 0.005376217, 4.3918, 0.005376217, 8.7835, 0.005376217, 5.2701, 0.005376217, 0.008744, 0.005376217, 0.5312, 0.003794976, 0.0, 0.0, 100.0, 0.006701184, 0.000316248, 100.0, 0.006964813, 0.004111224, 100.0, 0.04560789, 0.00316248, 100.0, 0.03179686, 0.002529984, 100.0, 0.005187646, 0.00158124, 100.0, 0.003010974, 0.01138493, 100.0, 0.02586757, 0.004111224, 100.0, 0.02314422, 0.007273705, 100.0, 0.004237084, 0.008538697, 100.0, 0.1414059, 0.00158124, 100.0, 0.344433, 0.006641209, 100.0, 0.04293526, 0.00474372, 100.0, 0.02891033, 0.0, 100.0, 0.1031949, 0.0009487441, 100.0, 0.4901751, 0.006641209, 100.0, 0.3275386, 0.0009487441, 100.0, 0.07033183, 0.02909482, 100.0, 0.1085227, 0.002846232, 100.0, 0.008024529, 0.0006324961, 100.0, 0.02476986, 0.0006324961, 100.0, 0.1701828, 0.004111224, 100.0, 0.5658597, 0.000316248, 100.0, 0.02889506, 0.001264992, 100.0, 0.4967611, 0.0009487441, 100.0, 0.07122388, 0.0, 100.0, 0.07122388, 0.0, 100.0, 0.5191829, 0.002529984, 100.0, 0.05307133, 0.001264992, 100.0, 0.006055101, 0.005376217, 100.0, 0.01763978, 0.0, 100.0, 0.03319824, 0.0, 100.0, 0.01428499, 0.005692465, 100.0, 0.07122388, 0.0, 100.0, 0.03319589, 0.000316248, 100.0, 0.03319589, 0.000316248, 100.0, 0.07122388, 0.0, 100.0, 0.003920992, 0.0006324961, 100.0, 0.05176996, 0.0009487441, 100.0, 0.6184815, 0.00158124, 100.0, 0.03020566, 0.000316248, 100.0, 0.03179077, 0.000316248, 100.0, 0.01463618, 0.0006324961, 100.0, 0.01108511, 0.0006324961, 100.0, 0.002549623, 0.0, 100.0, 0.002549623, 0.0, 100.0, 0.0974545, 0.0006324961, 100.0, 0.00544119, 0.000316248, 100.0, 4.918333e-05, 0.002846232, 100.0, 0.02728923, 0.000316248, 100.0, 0.01395976, 0.00158124, 100.0, 0.2953445, 0.0, 100.0, 0.2953445, 0.000316248, 100.0, 0.03608434, 0.004427472, 100.0, 0.2077922, 0.002529984, 100.0, 1.012784, 0.0009487441, 100.0, 0.002217992, 0.001264992, 100.0, 0.06589921, 0.001897488, 100.0, 0.03871855, 0.000316248, 100.0, 0.2384683, 0.0006324961, 100.0, 0.407612, 0.0009487441, 100.0, 0.0008111827, 0.000316248, 100.0, 0.1455156, 0.000316248, 100.0, 0.007642617, 0.0006324961, 100.0, 0.02037869, 0.001264992, 100.0, 0.1264408, 0.000316248, 100.0, 0.0006845126, 0.0009487441, 100.0, 0.3941679, 0.0009487441, 100.0, 0.1648827, 0.002213736, 100.0, 39.40506, 0.0006324961, 100.0, 5.20533, 0.01043619, 100.0, 0.0006577276, 0.007273705, 100.0, 0.7378095, 0.000316248, 100.0, 0.180917, 0.0009487441, 100.0, 0.122997, 0.0009487441, 100.0, 0.01636325, 0.001264992, 100.0, 0.4239369, 0.000316248, 100.0, 0.3710793, 0.0009487441, 100.0, 0.001418598, 0.001264992, 100.0, 0.01530346, 0.000316248, 100.0, 0.007713443, 0.0006324961, 100.0, 0.006884487, 0.000316248, 100.0, 0.006884487, 0.0, 100.0, 0.08877329, 0.0009487441, 100.0, 0.0749669, 0.01170118, 100.0, 0.6472173, 0.001897488, 100.0, 0.0877117, 0.0006324961, 100.0, 0.03933951, 0.001264992, 100.0, 0.1285295, 0.009803689, 100.0, 0.3704438, 0.000316248, 100.0, 0.1502261, 0.0009487441, 100.0, 0.0557306, 0.0006324961, 100.0, 0.06125023, 0.01201743, 100.0, 0.009427201, 0.0009487441, 100.0, 0.01236526, 0.0, 100.0, 0.001518757, 0.002213736, 100.0, 0.001835863, 0.000316248, 100.0, 0.001835863, 0.0006324961, 100.0, 0.07122388, 0.0, 100.0, 0.07122388, 0.0, 100.0, 0.1190007, 0.01201743, 100.0, 0.005799864, 0.0009487441, 100.0, 0.113843, 0.0006324961, 100.0, 0.07122388, 0.0, 100.0, 0.07122388, 0.0, 100.0, 0.01450361, 0.0009487441, 100.0, 0.07574784, 0.00158124, 100.0, 0.04751087, 0.0006324961, 100.0, 0.2023389, 0.00158124, 100.0, 0.01397178, 0.001897488, 100.0, 0.07122388, 0.0, 100.0, 0.0, 0.0, 0.0, 7.701635e-05, 5.543936e-06, 5.603635e-06, 0.0, 0.0002601904, 6.026319e-06, 1.208668e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.688368e-06, 0.0001925409, 2.339785e-06, 2.85669e-05, 2.32799e-06, 5.321161e-07, 2.85669e-05, 2.504434e-06, 2.832733e-06, 0.0001219627, 2.471324e-06, 1.320401e-06, 2.099911e-06, 6.060462e-06, 2.339785e-06, 9.247881e-06, 2.750584e-05, 0.0001283606, 6.418029e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.514877e-05, 1.039638e-05, 1.233051e-05, 0.0, 0.0, 6.546783e-06, 6.418029e-05, 6.546783e-06, 6.546783e-06, 2.873745e-05, 5.816945e-05, 9.627044e-05, 6.506958e-06, 1.118124e-05, 6.217013e-06, 4.809915e-06, 4.388761e-06, 8.993035e-06, 6.776427e-06, 6.863611e-06, 2.489216e-06, 9.622233e-06, 9.622233e-06, 2.218213e-06, 0.0002567212, 3.230288e-06, 0.0002567212, 0.0002567212, 8.886366e-05, 0.0003850818, 1.335235e-05, 1.448329e-06, 5.754195e-06, 7.006582e-06, 7.241101e-06, 5.155044e-06, 5.854086e-06, 3.68147e-06, 5.352819e-06, 3.179866e-06, 5.92707e-07, 3.431828e-06, 4.145121e-06, 8.400562e-06, 2.546837e-05, 6.411618e-06, 3.027372e-05, 4.999763e-06, 1.66529e-06, 0.001, 0.1, 0.0002106579, 1.66529e-06, 1.66529e-06, 0.0, 1.388889e-06, 0.0005, 0.002777778, 4.0, 1000.0, 3.888889e-08, 0.0005555556, 3.888889e-07, 0.0, 0.0, 1.388889e-07, 2.777778e-08, 0.0002777778, 0.0, 0.0001944444, 2.777778, 20.0, 2.0, 0.01388889, 4.0, 200.0, 0.002083333, 1.25, 20.0, 2.0, 0.002083333, 122.2128, 122.2128, 211.0104, 211.0104, 12.88008, 12.88008, 1213.38, 1213.38, 48.5856, 48.5856, 111.3804, 111.3804, 15.28632, 15.28632, 291.9924, 291.9924, 363.348, 363.348, 478.62, 478.62, 289.3572, 289.3572, 440.892, 440.892, 594.792, 594.792, 357.246, 357.246, 490.644, 490.644, 1026.18, 1026.18, 380.7, 380.7, 238.6764, 238.6764, 399.312, 399.312, 152.7624, 152.7624, 0.0, 0.0, 0.0, 0.0, 5e-05, 1e-05, 1e-05, 1e-06, 0.005, 0.0, 5000.0, 5.0, 20.0, 0.0, 2.361111e-06, 0.002361111, 0.01038889, 10.0, 0.9444444, 10.0, 4.722222e-05, 0.004722222, 10.0, 0.9444444, 10.0, 1.180556e-06, 0.002361111, 0.0002833333, 0.0001888889, 0.0, 0.01888889, 500.0, 0.3541667, 500.0, 9.444444e-06, 0.005194444, 0.0, 8.263889e-06, 150.0, 0.0004722222, 2.361111, 10.0, 2.361111e-05, 0.09444444, 10.0, 0.4722222, 10.0, 7.083333e-06, 0.0007083333, 0.0, 9.444444e-06, 200.0, 0.0004722222, 1.416667, 200.0, 10.0, 0.006611111, 50.0, 10.0, 0.009444444, 10.0, 9.444444e-06, 0.0004722222, 0.0, 0.5194444, 50.0, 40.0, 2.361111e-05, 0.0, 0.3777778, 1.0, 0.01, 10.0, 0.02361111, 25.0, 10.0, 0.0007083333, 0.0003541667, 0.0, 9.444444e-06, 200.0, 0.0004722222, 1.180556, 110.0, 200.0, 2.361111e-05, 0.008736111, 50.0, 10.0, 0.009444444, 10.0, 7.083333e-06, 0.0005902778, 0.4722222, 50.0, 0.04722222, 50.0, 2.361111, 10.0, 10.0, 4.722222e-05, 0.03777778, 1.0, 0.5902778, 1.0, 0.0009444444, 0.0, 0.0004722222, 0.0, 0.4722222, 1.0, 0.01, 10.0, 0.01888889, 20.0, 10.0, 0.0007083333, 0.0003541667, 0.0, 1.180556e-05, 50.0, 0.0004722222, 0.02833333, 0.5, 20.0, 10.0, 2.361111e-05, 0.009916667, 50.0, 10.0, 0.01841667, 10.0, 5.666667e-06, 0.0009444444, 0.0, 0.03777778, 10.0, 0.3305556, 10.0, 0.0006611111, 0.0002361111, 0.0, 0.4722222, 1.0, 0.01, 10.0, 0.02361111, 11.0, 10.0, 0.0009444444, 0.0004722222, 0.0, 0.005666667, 75.0, 10.0, 0.4722222, 10.0, 0.0004722222, 0.0009444444, 0.01888889, 50.0, 50.0, 0.04722222, 50.0, 2.361111e-05, 0.0, 0.0, 0.0002833333, 1.416667e-06, 0.0002361111, 1.888889e-06, 0.0004722222, 1.416667e-06, 0.0005902778, 1.133333e-06, 0.0009444444, 0.000289731, 0.00126483, 0.001, 1e-06, 0.003162075, 0.001, 0.003162075, 0.001, 1.0, 0.003162075, 0.001, 0.0003162075, 0.001, 0.001, 3.162075e-06, 0.001, 1.0, 9.486225e-06, 0.001, 1.0, 0.00632415, 0.001, 0.1, 3.162075e-05, 0.01, 1.0, 3.162075e-06, 0.001, 0.0001, 0.003162075, 0.001, 0.0003162075, 0.001, 1.0, 0.01, 0.01, 0.003162075, 0.001, 316.2075, 10.0, 0.003162075, 0.001, 316.2075, 10.0, 0.003162075, 0.001, 0.003162075, 0.001, 1.0, 0.00632415, 1.0, 0.1, 0.00632415, 1.0, 0.1, 0.01, 0.01, 0.001581037, 0.001, 1.0, 0.0001581037, 0.001, 1.581037e-05, 0.001, 0.0001, 0.01, 0.01, 0.00632415, 0.001, 0.02213452, 0.001, 0.003162075, 0.001, 0.003162075, 0.001, 0.003162075, 0.001, 1.581038e-08, 0.001, 1.0, 0.003162075, 0.001, 0.01, 0.01, 0.01, 0.001, 0.1, 1e-09, 0.001, 0.001, 0.01, 0.001, 0.01, 0.01, 0.001, 0.02, 0.01, 0.01, 0.01, 0.001, 0.001, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.001, 0.01, 0.01, 0.01, 0.001, 0.001, 0.01, 0.01, 0.01, 0.01, 0.001, 0.01, 0.01, 0.01, 0.001, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.001, 0.01, 0.01, 0.01, 0.001, 0.001, 0.01, 0.01, 0.01, 0.01, 0.001, 0.01, 0.01, 0.01, 0.001, 0.01, 0.01, 0.01, 0.01, 0.01, 0.001, 0.02, 0.01, 0.01, 0.001, 0.1, 0.001, 0.1, 0.001, 0.1, 0.05, 0.0016, 0.01, 0.01, 0.05, 0.0032, 0.01, 0.01, 0.05, 0.05, 0.01, 0.0001, 2.0, 0.001, 0.001, 2e-05, 0.01, 0.001, 0.004, 0.001, 0.001, 0.01, 0.01, 0.0, 0.01, 0.0, 0.1, 1.0, 0.1, 1.0, 0.1, 1.0, 0.001, 1.0, 0.001, 1.0, 0.001, 1.0, 0.001, 1.0, 0.001, 1.0, 0.001, 1.0, 0.001, 1.0, 0.001, 1.0, 0.001, 1.0, 0.002, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.002, 0.001, 0.002, 0.001, 0.001, 1.0, 0.1, 0.0016, 0.001, 1.0, 0.002, 2e-05, 0.000347, 3.12e-05, 0.000347, 0.0031, 9.8e-05, 0.0031, 5.58e-06, 0.01, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001667, 2.0, 0.00016667, 0.001667, 2.0, 0.00016667, 0.004667, 2.0, 0.00016667, 0.004667, 2.0, 0.00016667, 0.001667, 2.0, 0.00016667, 0.001667, 2.0, 0.00016667, 0.001667, 2.0, 0.00016667, 0.001667, 2.0, 0.00016667, 0.00016667, 2.0, 0.00016667, 0.00016667, 2.0, 0.00016667, 0.001667, 2.0, 0.00016667, 0.00016667, 2.0, 0.00016667, 0.00016667, 2.0, 0.00016667, 0.00016667, 2.0, 0.00016667, 0.00016667, 2.0, 0.00016667, 0.001667, 2.0, 0.00016667, 0.00016667, 2.0, 0.00016667, 0.00016667, 2.0, 0.00016667, 0.00016667, 2.0, 0.00016667, 0.00016667, 2.0, 0.00016667, 0.00016667, 2.0, 0.00016667, 0.00016667, 2.0, 0.00016667, 0.00016667, 2.0, 0.00016667, 0.00016667, 2.0, 0.00016667, 0.00016667, 2.0, 0.00016667, 7.9309e-05, 2.0, 0.00016667, 0.00016667, 2.0, 0.00016667, 7.9309e-05, 2.0, 0.00016667, 0.00016667, 2.0, 0.00016667, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.00085205, 0.00085205, 0.00083711, 0.00083711, 0.00085205, 0.00085205, 0.00085205, 0.00085205, 0.0014, 0.0014, 0.00085205, 0.0014, 0.0014, 0.0014, 0.0014, 0.00085205, 0.0014, 0.0014, 0.0014, 0.0014, 0.0014, 0.0014, 0.0014, 0.0014, 0.0014, 7.7e-07, 3.1955e-05, 7.7e-07, 3.1955e-05, 0.009, 0.01, 0.01, 0.01, 0.008, 0.008, 0.011, 0.011, 0.007, 0.008, 0.008, 0.009, 0.009, 0.01, 0.011, 0.011, 0.009, 0.012, 0.012, 0.002, 0.002, 0.001, 0.001, 0.008, 0.008, 0.005, 0.007, 0.005, 0.007, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 0.009, 0.01, 0.01, 0.01, 0.008, 0.008, 0.011, 0.011, 0.007, 0.008, 0.008, 0.009, 0.009, 0.01, 0.011, 0.011, 0.009, 0.012, 0.012, 0.002, 0.002, 0.001, 0.001, 0.008, 0.008, 0.005, 0.007, 0.005, 0.007, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 0.004, 0.004, 0.004, 0.004, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.002, 0.002, 0.003, 0.003, 0.003, 0.002, 0.002, 0.002, 0.004, 0.004, 0.005, 0.005, 0.002, 0.006, 0.0015, 0.0035, 0.0015, 0.0035, 0.51, 0.51, 0.51, 0.51, 0.51, 0.51, 0.51, 0.51, 0.51, 0.51, 0.51, 0.51, 0.51, 0.51, 0.51, 0.51, 0.51, 0.51, 0.51, 0.51, 0.51, 0.51, 0.51, 0.51, 0.51, 0.51, 0.51, 0.51, 0.51, 0.004, 0.002, 0.002, 0.002, 0.01, 0.01, 0.004, 0.004, 0.012, 0.01, 0.01, 0.012, 0.012, 0.006, 0.004, 0.004, 0.012, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.014, 0.016, 0.0105, 0.0145, 0.0105, 0.0145, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.004, 0.002, 0.002, 0.002, 0.01, 0.01, 0.004, 0.004, 0.012, 0.01, 0.01, 0.012, 0.012, 0.006, 0.004, 0.004, 0.012, 0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.014, 0.016, 0.0105, 0.0145, 0.0105, 0.0145, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.005, 0.005, 0.005, 0.005, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.05, 0.05, 0.05, 0.05, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 5.0, 5.0, 5.0, 5.0, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.008, 0.01, 0.008, 0.01, 0.008, 0.01, 0.008, 0.01, 0.008, 0.01, 0.008, 0.01, 0.008, 0.01, 0.008, 0.01, 0.001, 0.01, 0.001, 0.01, 0.1, 1.0, 0.1, 1.0, 0.1, 0.1, 0.1, 1.0, 1.0, 0.1, 1.0, 1.0, 0.1, 1.0, 10.0, 0.1, 1.0, 10.0, 0.1, 1.0, 5.0, 0.1, 1.0, 5.0, 0.1, 0.01, 0.001, 1.0, 1.0, 0.001, 1.0, 1.0, 0.001, 0.1, 1.0, 0.001, 0.1, 0.01, 0.013, 0.001, 0.1, 1.0, 0.01, 0.001, 0.1, 1.0, 0.01, 0.001, 0.1, 1.0, 0.02, 2.0, 10.0, 0.0, 0.1, 1.0, 1.0, 0.001, 0.1, 1.0, 0.001, 0.1, 1.0, 0.001, 0.1, 1.0, 1.0, 0.011, 0.0, 0.001, 0.1, 1.0, 0.9, 0.011, 0.001, 0.1, 1.0, 0.001, 0.1, 1.0, 0.001, 0.1, 1.0, 0.001, 0.1, 1.0, 0.001, 0.01, 1.0, 100.0, 0.001, 0.1, 0.001, 0.1, 1.0, 0.001, 0.0, 0.1, 0.01, 1.0, 10.0, 0.001, 0.1, 0.001, 0.1, 0.001, 0.0001, 0.05, 5.0, 10.0, 0.01, 0.05, 5.0, 10.0, 0.001, 1.0, 0.0001, 0.001, 0.1, 1.0, 0.01, 60.0, 4.0, 200.0, 0.01, 0.012, 0.018, 0.01, 1.0, 1.0, 0.0001, 0.1, 0.1, 0.1, 0.01, 0.0, 0.0, 0.0, 0.0, 0.001, 1.0, 4.0, 0.1, 0.001, 0.0001, 0.1, 1.0, 10.0, 0.01, 0.01, 1.0, 10.0, 0.03, 0.005, 0.1, 1.0, 0.001, 0.001, 0.1, 1.0, 0.001, 0.001, 0.0001, 0.001, 0.001, 0.0001, 0.001, 0.01, 0.483, 0.001, 0.1, 0.01, 0.05, 0.01, 0.1, 1e-05, 0.1, 0.01, 5e-06, 0.01, 0.0004, 0.01, 0.001, 0.0001, 0.001, 0.0001, 0.0, 0.0, 0.0, 0.0, 0.001, 0.1, 1.0, 0.005, 0.001, 0.1, 1.0, 0.001, 0.1, 1.0, 0.001, 2.688368e-06, 0.002688368, 0.0001925409, 2.688368e-06, 0.0002339785, 2.85669e-05, 2.339785e-06, 0.000232799, 2.32799e-06, 5.321161e-05, 2.339785e-06, 2.85669e-05, 2.504434e-06, 2.504434e-06, 2.832733e-06, 0.0002832733, 0.0001219627, 2.832733e-06, 0.0002471324, 2.471324e-06, 0.0001219627, 0.0001219627, 2.471324e-06, 0.0001219627, 2.471324e-06, 0.0001219627, 1.320401e-06, 2.099911e-06, 1.320401e-06, 6.060462e-06, 6.060462e-06, 6.060462e-06, 6.060462e-06, 2.099911e-06, 2.85669e-05, 2.85669e-05, 2.32799e-06, 0.0001219627, 0.0001219627, 0.0001283606, 6.418029e-05, 0.0001219627, 6.418029e-05, 0.0006418029, 9.247881e-06, 9.247881e-05, 9.247881e-06, 1.514877e-05, 1.039638e-05, 0.0, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.039638e-05, 1.233051e-05, 1.039638e-05, 1.233051e-05, 0.0, 6.546783e-06, 6.546783e-06, 6.546783e-06, 2.873745e-05, 1.514877e-05, 1.233051e-05, 0.0, 6.546783e-06, 6.418029e-05, 6.546783e-06, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.233051e-05, 1.514877e-05, 1.233051e-05, 1.233051e-05, 1.233051e-05, 1.039638e-05, 0.0, 1.514877e-05, 1.233051e-05, 0.0, 6.546783e-06, 6.418029e-05, 6.546783e-06, 6.546783e-06, 2.873745e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.233051e-05, 1.233051e-05, 0.0, 6.546783e-06, 6.418029e-05, 6.546783e-06, 6.546783e-06, 2.873745e-05, 1.514877e-05, 1.039638e-05, 3.431828e-06, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.233051e-05, 1.233051e-05, 1.514877e-05, 1.233051e-05, 1.233051e-05, 1.039638e-05, 0.0, 1.514877e-05, 1.233051e-05, 0.0, 0.0, 6.546783e-06, 6.546783e-06, 6.418029e-05, 6.418029e-05, 6.546783e-06, 6.546783e-06, 6.546783e-06, 2.873745e-05, 6.546783e-06, 2.873745e-05, 5.816945e-05, 5.816945e-05, 5.816945e-05, 5.816945e-05, 9.627044e-05, 9.627044e-05, 9.627044e-05, 9.627044e-05, 9.627044e-05, 9.627044e-05, 9.627044e-05, 9.627044e-05, 9.627044e-05, 9.627044e-05, 9.627044e-05, 9.627044e-05, 9.627044e-05, 9.627044e-05, 9.627044e-05, 9.627044e-05, 9.627044e-05, 9.627044e-05, 9.627044e-05, 9.627044e-05, 9.627044e-05, 9.627044e-05, 9.627044e-05, 9.627044e-05, 9.627044e-05, 9.627044e-05, 9.627044e-05, 9.627044e-05, 9.627044e-05, 0.00021301, 0.00021301, 0.00083711, 0.00083711, 0.00021301, 0.00021301, 0.00021301, 0.00021301, 8.7106e-05, 8.7106e-05, 0.00021301, 8.7106e-05, 8.7106e-05, 8.7106e-05, 8.7106e-05, 0.00021301, 8.7106e-05, 8.7106e-05, 8.7106e-05, 8.7106e-05, 8.7106e-05, 8.7106e-05, 8.7106e-05, 8.7106e-05, 8.7106e-05, 8.7106e-05, 8.7106e-05, 8.7106e-05, 8.7106e-05, 0.00021301, 0.00021301, 0.00083711, 0.00083711, 0.00021301, 0.00021301, 0.00021301, 0.00021301, 8.7106e-05, 8.7106e-05, 0.00021301, 8.7106e-05, 8.7106e-05, 8.7106e-05, 8.7106e-05, 0.00021301, 8.7106e-05, 8.7106e-05, 8.7106e-05, 8.7106e-05, 8.7106e-05, 8.7106e-05, 8.7106e-05, 8.7106e-05, 8.7106e-05, 8.7106e-05, 8.7106e-05, 8.7106e-05, 8.7106e-05, 8.7106e-05, 8.7106e-05, 8.7106e-05, 8.7106e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.233051e-05, 1.233051e-05, 1.514877e-05, 1.233051e-05, 1.233051e-05, 1.118124e-05, 1.118124e-05, 1.514877e-05, 1.233051e-05, 1.118124e-05, 1.118124e-05, 1.118124e-05, 1.118124e-05, 6.418029e-05, 6.418029e-05, 1.118124e-05, 1.118124e-05, 5.816945e-05, 5.816945e-05, 5.816945e-05, 5.816945e-05, 0.00021301, 0.00021301, 0.00083711, 0.00083711, 0.00021301, 0.00021301, 0.00021301, 0.00021301, 8.7106e-05, 8.7106e-05, 0.00021301, 8.7106e-05, 8.7106e-05, 8.7106e-05, 8.7106e-05, 0.00021301, 8.7106e-05, 8.7106e-05, 8.7106e-05, 8.7106e-05, 8.7106e-05, 8.7106e-05, 8.7106e-05, 8.7106e-05, 8.7106e-05, 8.7106e-05, 8.7106e-05, 8.7106e-05, 8.7106e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.233051e-05, 1.233051e-05, 1.514877e-05, 1.233051e-05, 1.233051e-05, 1.039638e-05, 6.217013e-06, 1.514877e-05, 1.233051e-05, 6.217013e-06, 6.217013e-06, 6.546783e-06, 6.546783e-06, 6.418029e-05, 6.418029e-05, 6.546783e-06, 6.546783e-06, 5.816945e-05, 5.816945e-05, 5.816945e-05, 5.816945e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.233051e-05, 1.233051e-05, 1.514877e-05, 1.233051e-05, 1.233051e-05, 1.039638e-05, 4.809915e-06, 1.514877e-05, 1.233051e-05, 4.809915e-06, 4.809915e-06, 6.546783e-06, 6.546783e-06, 6.418029e-05, 6.418029e-05, 6.546783e-06, 6.546783e-06, 5.816945e-05, 5.816945e-05, 5.816945e-05, 5.816945e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.233051e-05, 1.233051e-05, 1.514877e-05, 1.233051e-05, 1.233051e-05, 1.039638e-05, 8.993035e-06, 1.514877e-05, 1.233051e-05, 8.993035e-06, 8.993035e-06, 8.993035e-06, 8.993035e-06, 6.418029e-05, 6.418029e-05, 8.993035e-06, 8.993035e-06, 5.816945e-05, 5.816945e-05, 5.816945e-05, 5.816945e-05, 0.00021301, 0.00021301, 0.00083711, 0.00083711, 0.00021301, 0.00021301, 0.00021301, 0.00021301, 8.7106e-05, 8.7106e-05, 0.00021301, 8.7106e-05, 8.7106e-05, 8.7106e-05, 8.7106e-05, 0.00021301, 8.7106e-05, 8.7106e-05, 8.7106e-05, 8.7106e-05, 8.7106e-05, 8.7106e-05, 8.7106e-05, 8.7106e-05, 8.7106e-05, 8.7106e-05, 8.7106e-05, 8.7106e-05, 8.7106e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.233051e-05, 1.233051e-05, 1.514877e-05, 1.233051e-05, 1.233051e-05, 1.118124e-05, 1.118124e-05, 1.514877e-05, 1.233051e-05, 1.118124e-05, 1.118124e-05, 1.118124e-05, 1.118124e-05, 6.418029e-05, 6.418029e-05, 1.118124e-05, 1.118124e-05, 5.816945e-05, 5.816945e-05, 5.816945e-05, 5.816945e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.233051e-05, 1.233051e-05, 1.514877e-05, 1.233051e-05, 1.233051e-05, 1.039638e-05, 6.217013e-06, 1.514877e-05, 1.233051e-05, 6.217013e-06, 6.217013e-06, 6.546783e-06, 6.546783e-06, 6.418029e-05, 6.418029e-05, 6.546783e-06, 6.546783e-06, 5.816945e-05, 5.816945e-05, 5.816945e-05, 5.816945e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.233051e-05, 1.233051e-05, 1.514877e-05, 1.233051e-05, 1.233051e-05, 1.039638e-05, 4.809915e-06, 1.514877e-05, 1.233051e-05, 4.809915e-06, 4.809915e-06, 6.546783e-06, 6.546783e-06, 6.418029e-05, 6.418029e-05, 6.546783e-06, 6.546783e-06, 5.816945e-05, 5.816945e-05, 5.816945e-05, 5.816945e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.514877e-05, 1.233051e-05, 1.233051e-05, 1.514877e-05, 1.233051e-05, 1.233051e-05, 1.039638e-05, 8.993035e-06, 1.514877e-05, 1.233051e-05, 8.993035e-06, 8.993035e-06, 8.993035e-06, 8.993035e-06, 6.418029e-05, 6.418029e-05, 8.993035e-06, 8.993035e-06, 5.816945e-05, 5.816945e-05, 5.816945e-05, 5.816945e-05, 1.118124e-05, 1.118124e-05, 4.809915e-06, 4.809915e-06, 2.546837e-05, 2.546837e-05, 1e-05, 1e-05, 0.0108, 6.776427e-06, 6.863611e-06, 2.489216e-06, 9.622233e-06, 9.622233e-06, 9.622233e-06, 2.218213e-06, 2.218213e-06, 3.431828e-06, 3.431828e-06, 3.230288e-06, 3.230288e-06, 4.813522e-05, 4.813522e-05, 4.813522e-05, 1.335235e-05, 1.335235e-05, 0.081, 4.83e-05, 4.83e-05, 5.754195e-06, 5.754195e-06, 5.754195e-06, 7.006582e-06, 5.754195e-06, 7.241101e-06, 5.754195e-06, 5.854086e-06, 5.352819e-06, 5.352819e-06, 3.179866e-06, 5.92707e-07, 9.622233e-06, 3.431828e-06, 3.431828e-06, 4.145121e-05, 8.400562e-06, 6.411618e-06, 3.027372e-05, 1.118124e-05, 9.622233e-06, 6.863611e-06, 6.863611e-06, 3.431828e-06, 9.622233e-06, 9.622233e-06, 3.431828e-06, 3.431828e-06, 3.431828e-06, 0.0002567212, 0.0002567212, 0.0002567212, 0.0002567212, 3.179866e-06, 1.448329e-06, 7.006582e-06, 7.241101e-06, 5.854086e-06, 1.335235e-05, 5.754195e-06, 5.352819e-06, 8.400562e-06, 3.027372e-05, 2.546837e-05, 5.754195e-06, 2.546837e-05, 0.0002567212, 0.0002567212, 0.0002567212, 9.622233e-06, 9.622233e-06, 9.622233e-06, 9.622233e-06, 3.027372e-05, 9.622233e-06, 9.622233e-06, 9.622233e-06, 4.145121e-06, 2.218213e-06, 5.754195e-06, 0.2635, 0.01391491, 0.1792, 0.0006324961, 0.0082295, 0.003478728, 0.296215, 0.002213736, 0.0, 0.0, 0.1, 1.0}, // fixedParameters
              std::vector<int>{},                          // plist
              std::vector<realtype>(774, 0.0),   // idlist
              std::vector<int>{}                           // z2event
          ) {}

    /**
     * @brief Clone this model instance.
     * @return A deep copy of this instance.
     */
    virtual amici::Model *clone() const override {
        return new Model_SPARCED_Brep(*this);
    }

    /** model specific implementation for fJ
     * @param J Matrix to which the Jacobian will be written
     * @param t timepoint
     * @param x Vector with the states
     * @param p parameter vector
     * @param k constants vector
     * @param h heavyside vector
     * @param w vector with helper variables
     * @param dwdx derivative of w wrt x
     **/
    virtual void fJ(realtype *J, const realtype t, const realtype *x,
                    const realtype *p, const realtype *k, const realtype *h,
                    const realtype *w, const realtype *dwdx) override {
        J_SPARCED_Brep(J, t, x, p, k, h, w, dwdx);
    }

    /** model specific implementation for fJB
     * @param JB Matrix to which the Jacobian will be written
     * @param t timepoint
     * @param x Vector with the states
     * @param p parameter vector
     * @param k constants vector
     * @param h heavyside vector
     * @param xB Vector with the adjoint states
     * @param w vector with helper variables
     * @param dwdx derivative of w wrt x
     **/
    virtual void fJB(realtype *JB, const realtype t, const realtype *x,
                     const realtype *p, const realtype *k, const realtype *h,
                     const realtype *xB, const realtype *w,
                     const realtype *dwdx) override {
        JB_SPARCED_Brep(JB, t, x, p, k, h, xB, w, dwdx);
    }

    /** model specific implementation for fJDiag
     * @param JDiag Matrix to which the Jacobian will be written
     * @param t timepoint
     * @param x Vector with the states
     * @param p parameter vector
     * @param k constants vector
     * @param h heavyside vector
     * @param w vector with helper variables
     * @param dwdx derivative of w wrt x
     **/
    virtual void fJDiag(realtype *JDiag, const realtype t, const realtype *x,
                        const realtype *p, const realtype *k, const realtype *h,
                        const realtype *w, const realtype *dwdx) override {
        JDiag_SPARCED_Brep(JDiag, t, x, p, k, h, w, dwdx);
    }

    virtual void fJSparse(realtype *JSparse, const realtype t, const realtype *x, const realtype *p, const realtype *k, const realtype *h, const realtype *w, const realtype *dwdx) override {
        JSparse_SPARCED_Brep( JSparse,  t,  x,  p,  k,  h,  w,  dwdx);
    }


    virtual void fJSparse_colptrs(sunindextype *colptrs) override {
        JSparse_colptrs_SPARCED_Brep(colptrs);
    }


    virtual void fJSparse_rowvals(sunindextype *rowvals) override {
        JSparse_rowvals_SPARCED_Brep(rowvals);
    }


    virtual void fJSparseB(realtype *JSparseB, const realtype t, const realtype *x, const realtype *p, const realtype *k, const realtype *h, const realtype *xB, const realtype *w, const realtype *dwdx) override {
        JSparseB_SPARCED_Brep( JSparseB,  t,  x,  p,  k,  h,  xB,  w,  dwdx);
    }


    virtual void fJSparseB_colptrs(sunindextype *colptrs) override {
        JSparseB_colptrs_SPARCED_Brep(colptrs);
    }


    virtual void fJSparseB_rowvals(sunindextype *rowvals) override {
        JSparseB_rowvals_SPARCED_Brep(rowvals);
    }


    /** model specific implementation of fJrz
     * @param nllh regularization for event measurements z
     * @param iz event output index
     * @param p parameter vector
     * @param k constant vector
     * @param z model event output at timepoint
     * @param sigmaz event measurement standard deviation at timepoint
     **/
    virtual void fJrz(realtype *nllh, const int iz, const realtype *p,
                      const realtype *k, const realtype *rz,
                      const realtype *sigmaz) override {}

    /** model specific implementation of fJy
     * @param nllh negative log-likelihood for measurements y
     * @param iy output index
     * @param p parameter vector
     * @param k constant vector
     * @param y model output at timepoint
     * @param sigmay measurement standard deviation at timepoint
     * @param my measurements at timepoint
     **/
    virtual void fJy(realtype *nllh, const int iy, const realtype *p,
                     const realtype *k, const realtype *y,
                     const realtype *sigmay, const realtype *my) override {
        Jy_SPARCED_Brep(nllh, iy, p, k, y, sigmay, my);
    }

    /** model specific implementation of fJz
     * @param nllh negative log-likelihood for event measurements z
     * @param iz event output index
     * @param p parameter vector
     * @param k constant vector
     * @param z model event output at timepoint
     * @param sigmaz event measurement standard deviation at timepoint
     * @param mz event measurements at timepoint
     **/
    virtual void fJz(realtype *nllh, const int iz, const realtype *p,
                     const realtype *k, const realtype *z,
                     const realtype *sigmaz, const realtype *mz) override {}

    /** model specific implementation of fdJrzdsigma
     * @param dJrzdsigma Sensitivity of event penalization Jrz w.r.t.
     * standard deviation sigmaz
     * @param iz event output index
     * @param p parameter vector
     * @param k constant vector
     * @param rz model root output at timepoint
     * @param sigmaz event measurement standard deviation at timepoint
     **/
    virtual void fdJrzdsigma(realtype *dJrzdsigma, const int iz,
                             const realtype *p, const realtype *k,
                             const realtype *rz,
                             const realtype *sigmaz) override {}

    /** model specific implementation of fdJrzdz
     * @param dJrzdz partial derivative of event penalization Jrz
     * @param iz event output index
     * @param p parameter vector
     * @param k constant vector
     * @param rz model root output at timepoint
     * @param sigmaz event measurement standard deviation at timepoint
     **/
    virtual void fdJrzdz(realtype *dJrzdz, const int iz, const realtype *p,
                         const realtype *k, const realtype *rz,
                         const realtype *sigmaz) override {}

    /** model specific implementation of fdJydsigma
     * @param dJydsigma Sensitivity of time-resolved measurement
     * negative log-likelihood Jy w.r.t. standard deviation sigmay
     * @param iy output index
     * @param p parameter vector
     * @param k constant vector
     * @param y model output at timepoint
     * @param sigmay measurement standard deviation at timepoint
     * @param my measurement at timepoint
     **/
    virtual void fdJydsigma(realtype *dJydsigma, const int iy,
                            const realtype *p, const realtype *k,
                            const realtype *y, const realtype *sigmay,
                            const realtype *my) override {
        dJydsigmay_SPARCED_Brep(dJydsigma, iy, p, k, y, sigmay, my);
    }


    /** model specific implementation of fdJzdsigma
     * @param dJzdsigma Sensitivity of event measurement
     * negative log-likelihood Jz w.r.t. standard deviation sigmaz
     * @param iz event output index
     * @param p parameter vector
     * @param k constant vector
     * @param z model event output at timepoint
     * @param sigmaz event measurement standard deviation at timepoint
     * @param mz event measurement at timepoint
     **/
    virtual void fdJzdsigma(realtype *dJzdsigma, const int iz,
                            const realtype *p, const realtype *k,
                            const realtype *z, const realtype *sigmaz,
                            const realtype *mz) override {}

    /** model specific implementation of fdJzdz
     * @param dJzdz partial derivative of event measurement negative
     *log-likelihood Jz
     * @param iz event output index
     * @param p parameter vector
     * @param k constant vector
     * @param z model event output at timepoint
     * @param sigmaz event measurement standard deviation at timepoint
     * @param mz event measurement at timepoint
     **/
    virtual void fdJzdz(realtype *dJzdz, const int iz, const realtype *p,
                        const realtype *k, const realtype *z,
                        const realtype *sigmaz, const realtype *mz) override {}

    /** model specific implementation of fdeltasx
     * @param deltaqB sensitivity update
     * @param t current time
     * @param x current state
     * @param p parameter vector
     * @param k constant vector
     * @param h heavyside vector
     * @param ip sensitivity index
     * @param ie event index
     * @param xdot new model right hand side
     * @param xdot_old previous model right hand side
     * @param xB adjoint state
     **/
    virtual void fdeltaqB(realtype *deltaqB, const realtype t,
                          const realtype *x, const realtype *p,
                          const realtype *k, const realtype *h, const int ip,
                          const int ie, const realtype *xdot,
                          const realtype *xdot_old,
                          const realtype *xB) override {}

    /** model specific implementation of fdeltasx
     * @param deltasx sensitivity update
     * @param t current time
     * @param x current state
     * @param p parameter vector
     * @param k constant vector
     * @param h heavyside vector
     * @param w repeating elements vector
     * @param ip sensitivity index
     * @param ie event index
     * @param xdot new model right hand side
     * @param xdot_old previous model right hand side
     * @param sx state sensitivity
     * @param stau event-time sensitivity
     **/
    virtual void fdeltasx(realtype *deltasx, const realtype t,
                          const realtype *x, const realtype *p,
                          const realtype *k, const realtype *h,
                          const realtype *w, const int ip, const int ie,
                          const realtype *xdot, const realtype *xdot_old,
                          const realtype *sx, const realtype *stau) override {}

    /** model specific implementation of fdeltax
     * @param deltax state update
     * @param t current time
     * @param x current state
     * @param p parameter vector
     * @param k constant vector
     * @param h heavyside vector
     * @param ie event index
     * @param xdot new model right hand side
     * @param xdot_old previous model right hand side
     **/
    virtual void fdeltax(realtype *deltax, const realtype t, const realtype *x,
                         const realtype *p, const realtype *k,
                         const realtype *h, const int ie, const realtype *xdot,
                         const realtype *xdot_old) override {}

    /** model specific implementation of fdeltaxB
     * @param deltaxB adjoint state update
     * @param t current time
     * @param x current state
     * @param p parameter vector
     * @param k constant vector
     * @param h heavyside vector
     * @param ie event index
     * @param xdot new model right hand side
     * @param xdot_old previous model right hand side
     * @param xB current adjoint state
     **/
    virtual void fdeltaxB(realtype *deltaxB, const realtype t,
                          const realtype *x, const realtype *p,
                          const realtype *k, const realtype *h, const int ie,
                          const realtype *xdot, const realtype *xdot_old,
                          const realtype *xB) override {}

    /** model specific implementation of fdrzdp
     * @param drzdp partial derivative of root output rz w.r.t. model parameters
     *p
     * @param ie event index
     * @param t current time
     * @param x current state
     * @param p parameter vector
     * @param k constant vector
     * @param h heavyside vector
     * @param ip parameter index w.r.t. which the derivative is requested
     **/
    virtual void fdrzdp(realtype *drzdp, const int ie, const realtype t,
                        const realtype *x, const realtype *p, const realtype *k,
                        const realtype *h, const int ip) override {}

    /** model specific implementation of fdrzdx
     * @param drzdx partial derivative of root output rz w.r.t. model states x
     * @param ie event index
     * @param t current time
     * @param x current state
     * @param p parameter vector
     * @param k constant vector
     * @param h heavyside vector
     **/
    virtual void fdrzdx(realtype *drzdx, const int ie, const realtype t,
                        const realtype *x, const realtype *p, const realtype *k,
                        const realtype *h) override {}

    /** model specific implementation of fsigmay
     * @param dsigmaydp partial derivative of standard deviation of measurements
     * @param t current time
     * @param p parameter vector
     * @param k constant vector
     * @param ip sensitivity index
     **/
    virtual void fdsigmaydp(realtype *dsigmaydp, const realtype t,
                            const realtype *p, const realtype *k,
                            const int ip) override {
        dsigmaydp_SPARCED_Brep(dsigmaydp, t, p, k, ip);
    }

    /** model specific implementation of fsigmaz
     * @param dsigmazdp partial derivative of standard deviation of event
     *measurements
     * @param t current time
     * @param p parameter vector
     * @param k constant vector
     * @param ip sensitivity index
     **/
    virtual void fdsigmazdp(realtype *dsigmazdp, const realtype t,
                            const realtype *p, const realtype *k,
                            const int ip) override {}

    virtual void fdJydy(realtype *dJydy, const int iy, const realtype *p, const realtype *k, const realtype *y, const realtype *sigmay, const realtype *my) override {
        dJydy_SPARCED_Brep( dJydy,  iy,  p,  k,  y,  sigmay,  my);
    }

    virtual void fdJydy_colptrs(sunindextype *colptrs, int index) override {
        dJydy_colptrs_SPARCED_Brep(colptrs, index);
    }

    virtual void fdJydy_rowvals(sunindextype *rowvals, int index) override {
        dJydy_rowvals_SPARCED_Brep(rowvals, index);
    }


    virtual void fdwdp(realtype *dwdp, const realtype t, const realtype *x, const realtype *p, const realtype *k, const realtype *h, const realtype *w, const realtype *tcl, const realtype *dtcldp, const int ip) override {
        dwdp_SPARCED_Brep( dwdp,  t,  x,  p,  k,  h,  w,  tcl,  dtcldp,  ip);
    }


    virtual void fdwdx(realtype *dwdx, const realtype t, const realtype *x, const realtype *p, const realtype *k, const realtype *h, const realtype *w, const realtype *tcl) override {
        dwdx_SPARCED_Brep( dwdx,  t,  x,  p,  k,  h,  w,  tcl);
    }


    virtual void fdxdotdw(realtype *dxdotdw, const realtype t, const realtype *x, const realtype *p, const realtype *k, const realtype *h, const realtype *w) override {
        dxdotdw_SPARCED_Brep( dxdotdw,  t,  x,  p,  k,  h,  w);
    }


    virtual void fdxdotdw_colptrs(sunindextype *colptrs) override {
        dxdotdw_colptrs_SPARCED_Brep(colptrs);
    }


    virtual void fdxdotdw_rowvals(sunindextype *rowvals) override {
        dxdotdw_rowvals_SPARCED_Brep(rowvals);
    }


    virtual void fdxdotdp(realtype *dxdotdp, const realtype t, const realtype *x, const realtype *p, const realtype *k, const realtype *h, const int ip, const realtype *w) override {
        dxdotdp_SPARCED_Brep( dxdotdp,  t,  x,  p,  k,  h,  ip,  w);
    }


    /** model specific implementation of fdydx
     * @param dydx partial derivative of observables y w.r.t. model states x
     * @param t current time
     * @param x current state
     * @param p parameter vector
     * @param k constant vector
     * @param h heavyside vector
     **/
    virtual void fdydx(realtype *dydx, const realtype t, const realtype *x,
                       const realtype *p, const realtype *k, const realtype *h,
                       const realtype *w, const realtype *dwdx) override {
        dydx_SPARCED_Brep(dydx, t, x, p, k, h, w, dwdx);
    }

    /** model specific implementation of fdydp
     * @param dydp partial derivative of observables y w.r.t. model parameters p
     * @param t current time
     * @param x current state
     * @param p parameter vector
     * @param k constant vector
     * @param h heavyside vector
     * @param ip parameter index w.r.t. which the derivative is requested
     **/
    virtual void fdydp(realtype *dydp, const realtype t, const realtype *x,
                       const realtype *p, const realtype *k, const realtype *h,
                       const int ip, const realtype *w,
                       const realtype *dwdp) override {
        dydp_SPARCED_Brep(dydp, t, x, p, k, h, ip, w, dwdp);
    }

    /** model specific implementation of fdzdp
     * @param dzdp partial derivative of event-resolved output z w.r.t. model
     *parameters p
     * @param ie event index
     * @param t current time
     * @param x current state
     * @param p parameter vector
     * @param k constant vector
     * @param h heavyside vector
     * @param ip parameter index w.r.t. which the derivative is requested
     **/
    virtual void fdzdp(realtype *dzdp, const int ie, const realtype t,
                       const realtype *x, const realtype *p, const realtype *k,
                       const realtype *h, const int ip) override {}

    /** model specific implementation of fdzdx
     * @param dzdx partial derivative of event-resolved output z w.r.t. model
     *states x
     * @param ie event index
     * @param t current time
     * @param x current state
     * @param p parameter vector
     * @param k constant vector
     * @param h heavyside vector
     **/
    virtual void fdzdx(realtype *dzdx, const int ie, const realtype t,
                       const realtype *x, const realtype *p, const realtype *k,
                       const realtype *h) override {}

    /** model specific implementation for froot
     * @param root values of the trigger function
     * @param t timepoint
     * @param x Vector with the states
     * @param p parameter vector
     * @param k constants vector
     * @param h heavyside vector
     **/
    virtual void froot(realtype *root, const realtype t, const realtype *x,
                       const realtype *p, const realtype *k,
                       const realtype *h) override {}

    /** model specific implementation of frz
     * @param rz value of root function at current timepoint (non-output events
     *not included)
     * @param ie event index
     * @param t current time
     * @param x current state
     * @param p parameter vector
     * @param k constant vector
     * @param h heavyside vector
     **/
    virtual void frz(realtype *rz, const int ie, const realtype t,
                     const realtype *x, const realtype *p, const realtype *k,
                     const realtype *h) override {}

    /** model specific implementation of fsigmay
     * @param sigmay standard deviation of measurements
     * @param t current time
     * @param p parameter vector
     * @param k constant vector
     **/
    virtual void fsigmay(realtype *sigmay, const realtype t, const realtype *p,
                         const realtype *k) override {
        sigmay_SPARCED_Brep(sigmay, t, p, k);
    }

    /** model specific implementation of fsigmaz
     * @param sigmaz standard deviation of event measurements
     * @param t current time
     * @param p parameter vector
     * @param k constant vector
     **/
    virtual void fsigmaz(realtype *sigmaz, const realtype t, const realtype *p,
                         const realtype *k) override {}

    /** model specific implementation of fsrz
     * @param srz Sensitivity of rz, total derivative
     * @param ie event index
     * @param t current time
     * @param x current state
     * @param p parameter vector
     * @param k constant vector
     * @param sx current state sensitivity
     * @param h heavyside vector
     * @param ip sensitivity index
     **/
    virtual void fsrz(realtype *srz, const int ie, const realtype t,
                      const realtype *x, const realtype *p, const realtype *k,
                      const realtype *h, const realtype *sx,
                      const int ip) override {}

    /** model specific implementation of fstau
     * @param stau total derivative of event timepoint
     * @param t current time
     * @param x current state
     * @param p parameter vector
     * @param k constant vector
     * @param h heavyside vector
     * @param sx current state sensitivity
     * @param ip sensitivity index
     * @param ie event index
     **/
    virtual void fstau(realtype *stau, const realtype t, const realtype *x,
                       const realtype *p, const realtype *k, const realtype *h,
                       const realtype *sx, const int ip,
                       const int ie) override {}

    /** model specific implementation of fsx0
     * @param sx0 initial state sensitivities
     * @param t initial time
     * @param x0 initial state
     * @param p parameter vector
     * @param k constant vector
     * @param ip sensitivity index
     **/
    virtual void fsx0(realtype *sx0, const realtype t, const realtype *x0,
                      const realtype *p, const realtype *k,
                      const int ip) override {
        sx0_SPARCED_Brep(sx0, t, x0, p, k, ip);
    }

    /** model specific implementation of fsx0_fixedParameters
     * @param sx0 initial state sensitivities
     * @param t initial time
     * @param x0 initial state
     * @param p parameter vector
     * @param k constant vector
     * @param ip sensitivity index
     **/
    virtual void fsx0_fixedParameters(realtype *sx0, const realtype t,
                                      const realtype *x0, const realtype *p,
                                      const realtype *k,
                                      const int ip) override {
        sx0_fixedParameters_SPARCED_Brep(sx0, t, x0, p, k, ip);
    }

    /** model specific implementation of fsz
     * @param sz Sensitivity of rz, total derivative
     * @param ie event index
     * @param t current time
     * @param x current state
     * @param p parameter vector
     * @param k constant vector
     * @param h heavyside vector
     * @param sx current state sensitivity
     * @param ip sensitivity index
     **/
    virtual void fsz(realtype *sz, const int ie, const realtype t,
                     const realtype *x, const realtype *p, const realtype *k,
                     const realtype *h, const realtype *sx,
                     const int ip) override {}

    virtual void fw(realtype *w, const realtype t, const realtype *x, const realtype *p, const realtype *k, const realtype *h, const realtype *tcl) override {
        w_SPARCED_Brep( w,  t,  x,  p,  k,  h,  tcl);
    }


    /** model specific implementation of fx0
     * @param x0 initial state
     * @param t initial time
     * @param p parameter vector
     * @param k constant vector
     **/
    virtual void fx0(realtype *x0, const realtype t, const realtype *p,
                     const realtype *k) override {
        x0_SPARCED_Brep(x0, t, p, k);
    }

    /** model specific implementation of fx0_fixedParameters
     * @param x0 initial state
     * @param t initial time
     * @param p parameter vector
     * @param k constant vector
     **/
    virtual void fx0_fixedParameters(realtype *x0, const realtype t,
                                     const realtype *p,
                                     const realtype *k) override {
        x0_fixedParameters_SPARCED_Brep(x0, t, p, k);
    }

    /** model specific implementation for fxdot
     * @param xdot residual function
     * @param t timepoint
     * @param x Vector with the states
     * @param p parameter vector
     * @param k constants vector
     * @param h heavyside vector
     * @param w vector with helper variables
     **/
    virtual void fxdot(realtype *xdot, const realtype t, const realtype *x,
                       const realtype *p, const realtype *k, const realtype *h,
                       const realtype *w) override {
        xdot_SPARCED_Brep(xdot, t, x, p, k, h, w);
    }

    /** model specific implementation of fy
     * @param y model output at current timepoint
     * @param t current time
     * @param x current state
     * @param p parameter vector
     * @param k constant vector
     * @param h heavyside vector
     **/
    virtual void fy(realtype *y, const realtype t, const realtype *x,
                    const realtype *p, const realtype *k, const realtype *h,
                    const realtype *w) override {
        y_SPARCED_Brep(y, t, x, p, k, h, w);
    }

    /** model specific implementation of fz
     * @param z value of event output
     * @param ie event index
     * @param t current time
     * @param x current state
     * @param p parameter vector
     * @param k constant vector
     * @param h heavyside vector
     **/
    virtual void fz(realtype *z, const int ie, const realtype t,
                    const realtype *x, const realtype *p, const realtype *k,
                    const realtype *h) override {}

    

    virtual void fx_solver(realtype *x_solver, const realtype *x_rdata) override {
        x_solver_SPARCED_Brep( x_solver,  x_rdata);
    }


    virtual void ftotal_cl(realtype *total_cl, const realtype *x_rdata) override {
        total_cl_SPARCED_Brep( total_cl,  x_rdata);
    }


    /**
     * @brief Get names of the model parameters
     * @return the names
     */
    virtual std::vector<std::string> getParameterNames() const override {
        return std::vector<std::string>{};
    }

    /**
     * @brief Get names of the model states
     * @return the names
     */
    virtual std::vector<std::string> getStateNames() const override {
        return std::vector<std::string>{"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",};
    }

    /**
     * @brief Get names of the fixed model parameters
     * @return the names
     */
    virtual std::vector<std::string> getFixedParameterNames() const override {
        return std::vector<std::string>{
            "",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"",};
    }

    /**
     * @brief Get names of the observables
     * @return the names
     */
    virtual std::vector<std::string> getObservableNames() const override {
        return std::vector<std::string>{"y0",
"y1",
"y2",};
    }

    /**
     * @brief Get ids of the model parameters
     * @return the ids
     */
    virtual std::vector<std::string> getParameterIds() const override {
        return std::vector<std::string>{};
    }

    /**
     * @brief Get ids of the model states
     * @return the ids
     */
    virtual std::vector<std::string> getStateIds() const override {
        return std::vector<std::string>{"Ribosome",
"p53inac",
"p53ac",
"MDM2",
"Wip1",
"ATMP",
"ATRac",
"MDM2product1",
"MDM2product2",
"MDM2product3",
"MDM2product4",
"MDM2product5",
"MDM2product6",
"MDM2product7",
"MDM2product8",
"MDM2product9",
"MDM2pro",
"Wip1product1",
"Wip1product2",
"Wip1product3",
"Wip1product4",
"Wip1product5",
"Wip1product6",
"Wip1product7",
"Wip1product8",
"Wip1product9",
"Wip1pro",
"BRCA2",
"MSH6",
"MGMT",
"damageDSB",
"damageSSB",
"ppAKT_MDM2",
"pMDM2",
"ARF",
"MDM4",
"p53ac_MDM4",
"ATMinac",
"ATRinac",
"pRB",
"pRBp",
"pRBpp",
"E2F",
"Cd",
"Mdi",
"Md",
"Mdp27",
"Ce",
"Mei",
"Me",
"Skp2",
"Mep27",
"Pe",
"Pai",
"Pei",
"Pbi",
"Ca",
"Mai",
"Ma",
"Map27",
"p27",
"Cdh1i",
"Cdh1a",
"E2Fp",
"p27p",
"Pa",
"Cb",
"Mbi",
"Mb",
"Cdc20i",
"Cdc20a",
"Pb",
"Wee1",
"Wee1p",
"Mbp27",
"Chk1",
"pRBc1",
"pRBc2",
"p21",
"Mdp21",
"Mep21",
"Map21",
"Mbp21",
"L",
"R",
"L_R",
"Ractive",
"flip",
"Ractive_flip",
"pC8",
"Ractive_pC8",
"C8",
"Bar",
"C8_Bar",
"pC3",
"C8_pC3",
"C3",
"pC6",
"C3_pC6",
"C6",
"C6_C8",
"XIAP",
"C3_XIAP",
"PARP",
"C3_PARP",
"cPARP",
"Bid",
"C8_Bid",
"tBid",
"Bcl2c",
"tBid_Bcl2c",
"Bax",
"tBid_Bax",
"Baxactive",
"Baxm",
"Bcl2",
"Baxm_Bcl2",
"Bax2",
"Bax2_Bcl2",
"Bax4",
"Bax4_Bcl2",
"M",
"Bax4_M",
"Mactive",
"CytoCm",
"Mactive_CytoCm",
"CytoCr",
"Smacm",
"Mactive_Smacm",
"Smacr",
"CytoC",
"Apaf",
"CytoC_Apaf",
"Apafactive",
"pC9",
"Apop",
"Apop_C3",
"Smac",
"Apop_XIAP",
"Smac_XIAP",
"C3_Ub",
"BAD",
"PUMA",
"NOXA",
"Bcl2c_BAD",
"Bcl2c_PUMA",
"Bcl2c_NOXA",
"BIM",
"BIM_Bax",
"Bcl2c_BIM",
"ppERK_BIM",
"pBIM",
"ppAKT_BAD",
"pBAD",
"ppERK_BAD",
"E",
"H",
"HGF",
"P",
"F",
"I",
"INS",
"E1",
"pE1",
"E2",
"pE2",
"E3",
"E4",
"pE4",
"Ev3",
"Met",
"Pr",
"Fr",
"Ir",
"Isr",
"E1E1",
"E1E2",
"E1E3",
"E1E4",
"E2E2",
"E2E3",
"E2E4",
"E3E4",
"E4E4",
"Met_Met",
"FrFr",
"IrIr",
"Isr_Isr",
"EE1",
"HE3",
"HE4",
"HGF_Met",
"PPr",
"FFr",
"EE1E2",
"EE1Ev3",
"EE1E1",
"EE1E3",
"EE1E4",
"E2HE3",
"E1HE3",
"HE3E3",
"HE3Ev3",
"HE3E4",
"E2HE4",
"HE4Ev3",
"E1HE4",
"E3HE4",
"HE4E4",
"HGF_Met_Met",
"PPrPr",
"FFrFr",
"IIrIr",
"INS_Isr_Isr",
"EE1EE1",
"EE1HE3",
"EE1HE4",
"HE3HE3",
"HE3HE4",
"HE4HE4",
"HGF_Met_HGF_Met",
"PPrPPr",
"FFrFFr",
"IIrIrI",
"INS_Isr_Isr_INS",
"E1_ppERK",
"E2_ppERK",
"E4_ppERK",
"pEE1E2",
"pEE1Ev3",
"pEE1E1",
"pEE1EE1",
"pEE1E3",
"pEE1HE3",
"pEE1E4",
"pEE1HE4",
"pE2HE3",
"pHE3Ev3",
"pE1HE3",
"pHE3E4",
"pHE3HE4",
"pE2HE4",
"pHE4Ev3",
"pE1HE4",
"pE3HE4",
"pHE4E4",
"pHE4HE4",
"pHGF_Met_Met",
"pHGF_Met_HGF_Met",
"pPPrPPr",
"pPPrPr",
"pFFrFFr",
"pFFrFr",
"pIIrIr",
"pINS_Isr_Isr",
"pIIrIrI",
"pINS_Isr_Isr_INS",
"pIIrIr_IRS",
"pINS_Isr_Isr_IRS",
"pIIrIrI_IRS",
"pINS_Isr_Isr_INS_IRS",
"Sp_EE1E2",
"Sp_EE1Ev3",
"Sp_EE1E1",
"Sp_EE1EE1",
"Sp_EE1E3",
"Sp_EE1HE3",
"Sp_EE1E4",
"Sp_EE1HE4",
"Sp_E2HE3",
"Sp_HE3Ev3",
"Sp_E1HE3",
"Sp_HE3E4",
"Sp_HE3HE4",
"Sp_E2HE4",
"Sp_HE4Ev3",
"Sp_E1HE4",
"Sp_E3HE4",
"Sp_HE4E4",
"Sp_HE4HE4",
"Sp_HGF_Met_Met",
"Sp_HGF_Met_HGF_Met",
"Sp_PPrPPr",
"Sp_PPrPr",
"Sp_FFrFFr",
"Sp_FFrFr",
"Sp_IIrIr",
"Sp_INS_Isr_Isr",
"Sp_IIrIrI",
"Sp_INS_Isr_Isr_INS",
"EE1E2int",
"EE1Ev3int",
"EE1E1int",
"EE1EE1int",
"EE1E3int",
"EE1HE3int",
"EE1E4int",
"EE1HE4int",
"E2HE3int",
"HE3Ev3int",
"E1HE3int",
"HE3E4int",
"HE3HE4int",
"E2HE4int",
"HE4Ev3int",
"E1HE4int",
"E3HE4int",
"HE4E4int",
"HE4HE4int",
"HGF_Met_Metint",
"HGF_Met_HGF_Metint",
"PPrPPrint",
"PPrPrint",
"FFrFFrint",
"FFrFrint",
"IIrIr_int",
"INS_Isr_Isr_int",
"IIrIrI_int",
"INS_Isr_Isr_INS_int",
"pEE1E2int",
"pEE1Ev3int",
"pEE1E1int",
"pEE1EE1int",
"pEE1E3int",
"pEE1HE3int",
"pEE1E4int",
"pEE1HE4int",
"pE2HE3int",
"pHE3Ev3int",
"pE1HE3int",
"pHE3E4int",
"pHE3HE4int",
"pE2HE4int",
"pHE4Ev3int",
"pE1HE4int",
"pE3HE4int",
"pHE4E4int",
"pHE4HE4int",
"pHGF_Met_Metint",
"pHGF_Met_HGF_Metint",
"pPPrPPrint",
"pPPrPrint",
"pFFrFFrint",
"pFFrFrint",
"pIIrIr_int",
"pINS_Isr_Isr_int",
"pIIrIrI_int",
"pINS_Isr_Isr_INS_int",
"pIIrIr_int_IRS",
"pINS_Isr_Isr_int_IRS",
"pIIrIrI_int_IRS",
"pINS_Isr_Isr_INS_int_IRS",
"pEE1E2_G2_SOS",
"pEE1Ev3_G2_SOS",
"pEE1E1_G2_SOS",
"pEE1EE1_G2_SOS",
"pEE1E3_G2_SOS",
"pEE1HE3_G2_SOS",
"pEE1E4_G2_SOS",
"pEE1HE4_G2_SOS",
"pE2HE3_G2_SOS",
"pHE3Ev3_G2_SOS",
"pE1HE3_G2_SOS",
"pHE3E4_G2_SOS",
"pHE3HE4_G2_SOS",
"pE2HE4_G2_SOS",
"pHE4Ev3_G2_SOS",
"pE1HE4_G2_SOS",
"pE3HE4_G2_SOS",
"pHE4E4_G2_SOS",
"pHE4HE4_G2_SOS",
"pHGF_Met_Met_G2_SOS",
"pHGF_Met_HGF_Met_G2_SOS",
"pPPrPPr_G2_SOS",
"pPPrPr_G2_SOS",
"pFFrFFr_G2_SOS",
"pFFrFr_G2_SOS",
"pIIrIr_IRS_G2_SOS",
"pINS_Isr_Isr_IRS_G2_SOS",
"pIIrIrI_IRS_G2_SOS",
"pINS_Isr_Isr_INS_IRS_G2_SOS",
"pEE1E2int_G2_SOS",
"pEE1Ev3int_G2_SOS",
"pEE1E1int_G2_SOS",
"pEE1EE1int_G2_SOS",
"pEE1E3int_G2_SOS",
"pEE1HE3int_G2_SOS",
"pEE1E4int_G2_SOS",
"pEE1HE4int_G2_SOS",
"pE2HE3int_G2_SOS",
"pHE3Ev3int_G2_SOS",
"pE1HE3int_G2_SOS",
"pHE3E4int_G2_SOS",
"pHE3HE4int_G2_SOS",
"pE2HE4int_G2_SOS",
"pHE4Ev3int_G2_SOS",
"pE1HE4int_G2_SOS",
"pE3HE4int_G2_SOS",
"pHE4E4int_G2_SOS",
"pHE4HE4int_G2_SOS",
"pHGF_Met_Metint_G2_SOS",
"pHGF_Met_HGF_Metint_G2_SOS",
"pPPrPPrint_G2_SOS",
"pPPrPrint_G2_SOS",
"pFFrFFrint_G2_SOS",
"pFFrFrint_G2_SOS",
"pIIrIr_int_IRS_G2_SOS",
"pINS_Isr_Isr_int_IRS_G2_SOS",
"pIIrIrI_int_IRS_G2_SOS",
"pINS_Isr_Isr_INS_int_IRS_G2_SOS",
"pEE1E2_PLCg",
"pEE1Ev3_PLCg",
"pEE1E1_PLCg",
"pEE1EE1_PLCg",
"pEE1E3_PLCg",
"pEE1HE3_PLCg",
"pEE1E4_PLCg",
"pEE1HE4_PLCg",
"pE2HE3_PLCg",
"pHE3Ev3_PLCg",
"pE1HE3_PLCg",
"pHE3E4_PLCg",
"pHE3HE4_PLCg",
"pE2HE4_PLCg",
"pHE4Ev3_PLCg",
"pE1HE4_PLCg",
"pE3HE4_PLCg",
"pHE4E4_PLCg",
"pHE4HE4_PLCg",
"pHGF_Met_Met_PLCg",
"pHGF_Met_HGF_Met_PLCg",
"pPPrPPr_PLCg",
"pPPrPr_PLCg",
"pFFrFFr_PLCg",
"pFFrFr_PLCg",
"pIIrIr_IRS_PLCg",
"pINS_Isr_Isr_IRS_PLCg",
"pIIrIrI_IRS_PLCg",
"pINS_Isr_Isr_INS_IRS_PLCg",
"pEE1E2_PI3K1",
"pEE1Ev3_PI3K1",
"pEE1E1_PI3K1",
"pEE1EE1_PI3K1",
"pEE1E3_PI3K1",
"pEE1HE3_PI3K1",
"pEE1E4_PI3K1",
"pEE1HE4_PI3K1",
"pE2HE3_PI3K1",
"pHE3Ev3_PI3K1",
"pE1HE3_PI3K1",
"pHE3E4_PI3K1",
"pHE3HE4_PI3K1",
"pE2HE4_PI3K1",
"pHE4Ev3_PI3K1",
"pE1HE4_PI3K1",
"pE3HE4_PI3K1",
"pHE4E4_PI3K1",
"pHE4HE4_PI3K1",
"pHGF_Met_Met_PI3K1",
"pHGF_Met_HGF_Met_PI3K1",
"pPPrPPr_PI3K1",
"pPPrPr_PI3K1",
"pFFrFFr_PI3K1",
"pFFrFr_PI3K1",
"pIIrIr_IRS_PI3K1",
"pINS_Isr_Isr_IRS_PI3K1",
"pIIrIrI_IRS_PI3K1",
"pINS_Isr_Isr_INS_IRS_PI3K1",
"pEE1E2_PI3K2",
"pEE1Ev3_PI3K2",
"pEE1E1_PI3K2",
"pEE1EE1_PI3K2",
"pEE1E3_PI3K2",
"pEE1HE3_PI3K2",
"pEE1E4_PI3K2",
"pEE1HE4_PI3K2",
"pE2HE3_PI3K2",
"pHE3Ev3_PI3K2",
"pE1HE3_PI3K2",
"pHE3E4_PI3K2",
"pHE3HE4_PI3K2",
"pE2HE4_PI3K2",
"pHE4Ev3_PI3K2",
"pE1HE4_PI3K2",
"pE3HE4_PI3K2",
"pHE4E4_PI3K2",
"pHE4HE4_PI3K2",
"pHGF_Met_Met_PI3K2",
"pHGF_Met_HGF_Met_PI3K2",
"pPPrPPr_PI3K2",
"pPPrPr_PI3K2",
"pFFrFFr_PI3K2",
"pFFrFr_PI3K2",
"pIIrIr_IRS_PI3K2",
"pINS_Isr_Isr_IRS_PI3K2",
"pIIrIrI_IRS_PI3K2",
"pINS_Isr_Isr_INS_IRS_PI3K2",
"pEE1E2int_G2_SOS_RasD",
"pEE1Ev3int_G2_SOS_RasD",
"pEE1E1int_G2_SOS_RasD",
"pEE1EE1int_G2_SOS_RasD",
"pEE1E3int_G2_SOS_RasD",
"pEE1HE3int_G2_SOS_RasD",
"pEE1E4int_G2_SOS_RasD",
"pEE1HE4int_G2_SOS_RasD",
"pE2HE3int_G2_SOS_RasD",
"pHE3Ev3int_G2_SOS_RasD",
"pE1HE3int_G2_SOS_RasD",
"pHE3E4int_G2_SOS_RasD",
"pHE3HE4int_G2_SOS_RasD",
"pE2HE4int_G2_SOS_RasD",
"pHE4Ev3int_G2_SOS_RasD",
"pE1HE4int_G2_SOS_RasD",
"pE3HE4int_G2_SOS_RasD",
"pHE4E4int_G2_SOS_RasD",
"pHE4HE4int_G2_SOS_RasD",
"pHGF_Met_Metint_G2_SOS_RasD",
"pHGF_Met_HGF_Metint_G2_SOS_RasD",
"pPPrPPrint_G2_SOS_RasD",
"pPPrPrint_G2_SOS_RasD",
"pFFrFFrint_G2_SOS_RasD",
"pFFrFrint_G2_SOS_RasD",
"pIIrIr_int_IRS_G2_SOS_RasD",
"pINS_Isr_Isr_int_IRS_G2_SOS_RasD",
"pIIrIrI_int_IRS_G2_SOS_RasD",
"pINS_Isr_Isr_INS_int_IRS_G2_SOS_RasD",
"pEE1E2_G2_SOS_RasD",
"pEE1Ev3_G2_SOS_RasD",
"pEE1E1_G2_SOS_RasD",
"pEE1EE1_G2_SOS_RasD",
"pEE1E3_G2_SOS_RasD",
"pEE1HE3_G2_SOS_RasD",
"pEE1E4_G2_SOS_RasD",
"pEE1HE4_G2_SOS_RasD",
"pE2HE3_G2_SOS_RasD",
"pHE3Ev3_G2_SOS_RasD",
"pE1HE3_G2_SOS_RasD",
"pHE3E4_G2_SOS_RasD",
"pHE3HE4_G2_SOS_RasD",
"pE2HE4_G2_SOS_RasD",
"pHE4Ev3_G2_SOS_RasD",
"pE1HE4_G2_SOS_RasD",
"pE3HE4_G2_SOS_RasD",
"pHE4E4_G2_SOS_RasD",
"pHE4HE4_G2_SOS_RasD",
"pHGF_Met_Met_G2_SOS_RasD",
"pHGF_Met_HGF_Met_G2_SOS_RasD",
"pPPrPPr_G2_SOS_RasD",
"pPPrPr_G2_SOS_RasD",
"pFFrFFr_G2_SOS_RasD",
"pFFrFr_G2_SOS_RasD",
"pIIrIr_IRS_G2_SOS_RasD",
"pINS_Isr_Isr_IRS_G2_SOS_RasD",
"pIIrIrI_IRS_G2_SOS_RasD",
"pINS_Isr_Isr_INS_IRS_G2_SOS_RasD",
"pEE1E2_PLCg_PIP2",
"pEE1Ev3_PLCg_PIP2",
"pEE1E1_PLCg_PIP2",
"pEE1EE1_PLCg_PIP2",
"pEE1E3_PLCg_PIP2",
"pEE1HE3_PLCg_PIP2",
"pEE1E4_PLCg_PIP2",
"pEE1HE4_PLCg_PIP2",
"pE2HE3_PLCg_PIP2",
"pHE3Ev3_PLCg_PIP2",
"pE1HE3_PLCg_PIP2",
"pHE3E4_PLCg_PIP2",
"pHE3HE4_PLCg_PIP2",
"pE2HE4_PLCg_PIP2",
"pHE4Ev3_PLCg_PIP2",
"pE1HE4_PLCg_PIP2",
"pE3HE4_PLCg_PIP2",
"pHE4E4_PLCg_PIP2",
"pHE4HE4_PLCg_PIP2",
"pHGF_Met_Met_PLCg_PIP2",
"pHGF_Met_HGF_Met_PLCg_PIP2",
"pPPrPPr_PLCg_PIP2",
"pPPrPr_PLCg_PIP2",
"pFFrFFr_PLCg_PIP2",
"pFFrFr_PLCg_PIP2",
"pIIrIr_IRS_PLCg_PIP2",
"pINS_Isr_Isr_IRS_PLCg_PIP2",
"pIIrIrI_IRS_PLCg_PIP2",
"pINS_Isr_Isr_INS_IRS_PLCg_PIP2",
"pEE1E2_PI3K1_PIP2",
"pEE1Ev3_PI3K1_PIP2",
"pEE1E1_PI3K1_PIP2",
"pEE1EE1_PI3K1_PIP2",
"pEE1E3_PI3K1_PIP2",
"pEE1HE3_PI3K1_PIP2",
"pEE1E4_PI3K1_PIP2",
"pEE1HE4_PI3K1_PIP2",
"pE2HE3_PI3K1_PIP2",
"pHE3Ev3_PI3K1_PIP2",
"pE1HE3_PI3K1_PIP2",
"pHE3E4_PI3K1_PIP2",
"pHE3HE4_PI3K1_PIP2",
"pE2HE4_PI3K1_PIP2",
"pHE4Ev3_PI3K1_PIP2",
"pE1HE4_PI3K1_PIP2",
"pE3HE4_PI3K1_PIP2",
"pHE4E4_PI3K1_PIP2",
"pHE4HE4_PI3K1_PIP2",
"pHGF_Met_Met_PI3K1_PIP2",
"pHGF_Met_HGF_Met_PI3K1_PIP2",
"pPPrPPr_PI3K1_PIP2",
"pPPrPr_PI3K1_PIP2",
"pFFrFFr_PI3K1_PIP2",
"pFFrFr_PI3K1_PIP2",
"pIIrIr_IRS_PI3K1_PIP2",
"pINS_Isr_Isr_IRS_PI3K1_PIP2",
"pIIrIrI_IRS_PI3K1_PIP2",
"pINS_Isr_Isr_INS_IRS_PI3K1_PIP2",
"pEE1E2_PI3K2_PIP",
"pEE1Ev3_PI3K2_PIP",
"pEE1E1_PI3K2_PIP",
"pEE1EE1_PI3K2_PIP",
"pEE1E3_PI3K2_PIP",
"pEE1HE3_PI3K2_PIP",
"pEE1E4_PI3K2_PIP",
"pEE1HE4_PI3K2_PIP",
"pE2HE3_PI3K2_PIP",
"pHE3Ev3_PI3K2_PIP",
"pE1HE3_PI3K2_PIP",
"pHE3E4_PI3K2_PIP",
"pHE3HE4_PI3K2_PIP",
"pE2HE4_PI3K2_PIP",
"pHE4Ev3_PI3K2_PIP",
"pE1HE4_PI3K2_PIP",
"pE3HE4_PI3K2_PIP",
"pHE4E4_PI3K2_PIP",
"pHE4HE4_PI3K2_PIP",
"pHGF_Met_Met_PI3K2_PIP",
"pHGF_Met_HGF_Met_PI3K2_PIP",
"pPPrPPr_PI3K2_PIP",
"pPPrPr_PI3K2_PIP",
"pFFrFFr_PI3K2_PIP",
"pFFrFr_PI3K2_PIP",
"pIIrIr_IRS_PI3K2_PIP",
"pINS_Isr_Isr_IRS_PI3K2_PIP",
"pIIrIrI_IRS_PI3K2_PIP",
"pINS_Isr_Isr_INS_IRS_PI3K2_PIP",
"IRS",
"Sp",
"Cbl",
"G2",
"G2_SOS",
"G2_pSOS",
"PLCg",
"PI3KC1",
"PI3KR1",
"PI3K1",
"pPI3K1",
"PI3K2",
"mTORC1",
"mTORC1active",
"PIP",
"PI3P",
"DAG",
"GRP",
"DAG_GRP",
"RasT",
"RasD",
"NF1",
"pNF1",
"pCRaf",
"CRaf",
"RasT_CRaf",
"BRaf",
"RasT_CRaf_BRaf",
"MEK",
"pMEK",
"ppMEK",
"MKP3",
"ERKnuc",
"ppERKnuc",
"RSK",
"pRSK",
"pRSKnuc",
"MKP1",
"pMKP1",
"cFos",
"pcFos",
"cJun",
"pcFos_cJun",
"cMyc",
"bCATENINnuc",
"bCATENIN",
"pbCATENIN",
"IP3",
"PIP2",
"PIP3",
"PTEN",
"PIP3_AKT",
"AKT",
"pAKT",
"ppAKT",
"PDK1",
"PIP3_PDK1",
"PIP3_pAKT",
"Rictor",
"mTOR",
"mTORC2",
"PIP3_ppAKT",
"GSK3b",
"pGSK3b",
"TSC1",
"TSC2",
"pTSC2",
"TSC",
"PKC",
"DAG_PKC",
"pRKIP",
"RKIP",
"RKIP_CRaf",
"ERK",
"pERK",
"ppERK",
"FOXO",
"pFOXO",
"RhebD",
"RhebT",
"Raptor",
"S6K",
"pS6K",
"EIF4EBP1",
"pEIF4EBP1",
"SOS",
"G2_SOS_ppERK",
"CRaf_ppERK",
"RasD_DAG_GRP",
"RasT_NF1",
"NF1_ppERK",
"MEK_RasT_CRaf_BRaf",
"pMEK_RasT_CRaf_BRaf",
"ERK_ppMEK",
"pERK_ppMEK",
"RSK_ppERK",
"pRSKnuc_MKP1",
"ppERKnuc_MKP1",
"cFos_pRSKnuc",
"cFos_ppERKnuc",
"RKIP_DAG_PKC",
"PIP3_PTEN",
"PIP3_AKT_PIP3_PDK1",
"PIP3_pAKT_mTORC2",
"GSK3b_ppAKT",
"bCATENIN_GSK3b",
"TSC2_ppAKT",
"TSC2_ppERK",
"RhebT_TSC",
"EIF4EBP1_mTORC1active",
"S6K_mTORC1active",
"FOXO_ppAKT",
"PI3K1_mTORC1active",
"pERK_MKP3",
"ppERK_MKP3",
"ppERKnuc_pMKP1",
"RasT_BRaf",
"RasT_BRaf_BRaf",
"MEK_RasT_BRaf_BRaf",
"pMEK_RasT_BRaf_BRaf",
"EIF4E",
"EIF4EBP1_EIF4E",
"RasT_CRaf_CRaf",
"MEK_RasT_CRaf_CRaf",
"pMEK_RasT_CRaf_CRaf",
"FOXOnuc",
"MEKi",
"MEKi_ppMEK",
"AKTi",
"AKTi_AKT",
"mT",
"EIF4E_mT",};
    }

    /**
     * @brief Get ids of the fixed model parameters
     * @return the ids
     */
    virtual std::vector<std::string> getFixedParameterIds() const override {
        return std::vector<std::string>{
            "k1_1",
"k1_2",
"k1_3",
"k1_4",
"k2",
"k3_1",
"k3_2",
"k3_3",
"k4_1",
"k4_2",
"k4_3",
"k4_4",
"k5_1",
"k5_2",
"k5_3",
"k6_1",
"k6_2",
"k6_3",
"k7_1",
"k7_2",
"k7_3",
"k8_1",
"k8_2",
"k9_1",
"k9_2",
"k10_1",
"k10_2",
"k11_1",
"k11_2",
"k12_1",
"k12_2",
"k12_3",
"k12_4",
"k12_5",
"k12_6",
"k13_1",
"k13_2",
"k13_3",
"k13_4",
"k13_5",
"k13_6",
"k14_1",
"k14_2",
"k14_3",
"k14_4",
"k14_5",
"k14_6",
"k15_1",
"k15_2",
"k15_3",
"k15_4",
"k16_1",
"k16_2",
"k16_3",
"k16_4",
"k17_1",
"k17_2",
"k18_1",
"k18_2",
"k19_1",
"k19_2",
"k20_1",
"k20_2",
"k21_1",
"k21_2",
"k21_3",
"k21_4",
"k22_1",
"k22_2",
"k22_3",
"k22_4",
"k22_5",
"k23_1",
"k23_2",
"k24_1",
"k24_2",
"k25_1",
"k25_2",
"k26_1",
"k26_2",
"k27_1",
"k27_2",
"k28_1",
"k28_2",
"k33_1",
"k33_2",
"k33_3",
"k34_1",
"k34_2",
"k34_3",
"k35_1",
"k35_2",
"k35_3",
"k36_1",
"k36_2",
"k36_3",
"k37_1",
"k37_2",
"k37_3",
"k38_1",
"k38_2",
"k38_3",
"k39_1",
"k39_2",
"k39_3",
"k40_1",
"k40_2",
"k40_3",
"k41_1",
"k41_2",
"k41_3",
"k42_1",
"k42_2",
"k42_3",
"k43_1",
"k43_2",
"k43_3",
"k44_1",
"k44_2",
"k44_3",
"k45_1",
"k45_2",
"k45_3",
"k46_1",
"k46_2",
"k46_3",
"k47_1",
"k47_2",
"k47_3",
"k48_1",
"k48_2",
"k48_3",
"k49_1",
"k49_2",
"k49_3",
"k50_1",
"k50_2",
"k50_3",
"k51_1",
"k51_2",
"k51_3",
"k52_1",
"k52_2",
"k52_3",
"k53_1",
"k53_2",
"k53_3",
"k54_1",
"k54_2",
"k54_3",
"k55_1",
"k55_2",
"k55_3",
"k56_1",
"k56_2",
"k56_3",
"k57_1",
"k57_2",
"k57_3",
"k58_1",
"k58_2",
"k58_3",
"k59_1",
"k59_2",
"k59_3",
"k60_1",
"k60_2",
"k60_3",
"k61_1",
"k61_2",
"k61_3",
"k62_1",
"k62_2",
"k62_3",
"k63_1",
"k63_2",
"k63_3",
"k64_1",
"k64_2",
"k64_3",
"k65_1",
"k65_2",
"k65_3",
"k66_1",
"k66_2",
"k66_3",
"k67_1",
"k67_2",
"k67_3",
"k68_1",
"k68_2",
"k68_3",
"k69_1",
"k69_2",
"k69_3",
"k70_1",
"k70_2",
"k70_3",
"k71_1",
"k71_2",
"k71_3",
"k72_1",
"k72_2",
"k72_3",
"k73_1",
"k73_2",
"k73_3",
"k74_1",
"k74_2",
"k74_3",
"k75_1",
"k75_2",
"k75_3",
"k76_1",
"k76_2",
"k76_3",
"k77_1",
"k77_2",
"k77_3",
"k78_1",
"k78_2",
"k78_3",
"k79_1",
"k79_2",
"k79_3",
"k80_1",
"k80_2",
"k80_3",
"k81_1",
"k81_2",
"k81_3",
"k82_1",
"k82_2",
"k82_3",
"k83_1",
"k83_2",
"k83_3",
"k84_1",
"k84_2",
"k84_3",
"k85_1",
"k85_2",
"k85_3",
"k86_1",
"k86_2",
"k86_3",
"k87_1",
"k87_2",
"k87_3",
"k88_1",
"k88_2",
"k88_3",
"k89_1",
"k89_2",
"k89_3",
"k90_1",
"k90_2",
"k90_3",
"k91_1",
"k91_2",
"k91_3",
"k92_1",
"k92_2",
"k92_3",
"k93_1",
"k93_2",
"k93_3",
"k94_1",
"k94_2",
"k94_3",
"k95_1",
"k95_2",
"k95_3",
"k96_1",
"k96_2",
"k96_3",
"k97_1",
"k97_2",
"k97_3",
"k98_1",
"k98_2",
"k98_3",
"k99_1",
"k99_2",
"k99_3",
"k100_1",
"k100_2",
"k100_3",
"k101_1",
"k101_2",
"k101_3",
"k102_1",
"k102_2",
"k102_3",
"k103_1",
"k103_2",
"k103_3",
"k104_1",
"k104_2",
"k104_3",
"k105_1",
"k105_2",
"k105_3",
"k106_1",
"k106_2",
"k106_3",
"k107_1",
"k107_2",
"k107_3",
"k108_1",
"k108_2",
"k108_3",
"k109_1",
"k109_2",
"k109_3",
"k110_1",
"k110_2",
"k110_3",
"k111_1",
"k111_2",
"k111_3",
"k112_1",
"k112_2",
"k112_3",
"k113_1",
"k113_2",
"k113_3",
"k114_1",
"k114_2",
"k114_3",
"k115_1",
"k115_2",
"k115_3",
"k116_1",
"k116_2",
"k116_3",
"k117_1",
"k117_2",
"k117_3",
"k118_1",
"k118_2",
"k118_3",
"k119_1",
"k119_2",
"k119_3",
"k120_1",
"k120_2",
"k120_3",
"k121_1",
"k121_2",
"k121_3",
"k122_1",
"k122_2",
"k122_3",
"k123_1",
"k123_2",
"k123_3",
"k124_1",
"k124_2",
"k124_3",
"k125_1",
"k125_2",
"k125_3",
"k126_1",
"k126_2",
"k126_3",
"k127_1",
"k127_2",
"k127_3",
"k128_1",
"k128_2",
"k128_3",
"k129_1",
"k129_2",
"k129_3",
"k130_1",
"k130_2",
"k130_3",
"k131_1",
"k131_2",
"k131_3",
"k132_1",
"k132_2",
"k132_3",
"k133_1",
"k133_2",
"k133_3",
"k134_1",
"k134_2",
"k134_3",
"k135_1",
"k135_2",
"k135_3",
"k136_1",
"k136_2",
"k136_3",
"k137_1",
"k137_2",
"k137_3",
"k138_1",
"k138_2",
"k138_3",
"k139_1",
"k139_2",
"k139_3",
"k140_1",
"k140_2",
"k140_3",
"k141_1",
"k141_2",
"k141_3",
"k142_1",
"k142_2",
"k142_3",
"k143_1",
"k143_2",
"k143_3",
"k144",
"k145",
"k146",
"k147",
"k148",
"k149",
"k150",
"k151",
"k152",
"k153",
"k154",
"k155",
"k156",
"k157",
"k158",
"k159",
"k160",
"k161",
"k162",
"k163",
"k164",
"k165",
"k166",
"k167",
"k168",
"k169",
"k170",
"k171",
"k172",
"k173",
"k174",
"k175",
"k176",
"k177",
"k178",
"k179",
"k180",
"k181",
"k182",
"k183",
"k184",
"k185",
"k186",
"k187",
"k188",
"k189",
"k190",
"k191",
"k192",
"k193",
"k194",
"k195",
"k196",
"k197",
"k198",
"k199",
"k200",
"k201",
"k202",
"k203",
"k204",
"k205",
"k206",
"k207",
"k208",
"k209",
"k210",
"k211",
"k212",
"k213",
"k214",
"k215",
"k216",
"k217",
"k218",
"k219",
"k220",
"k221",
"k222",
"k223",
"k224",
"k225",
"k226",
"k227",
"k228",
"k229",
"k230",
"k231",
"k232",
"k233",
"k234",
"k235",
"k236",
"k237",
"k238",
"k239",
"k240",
"k241",
"k242",
"k243",
"k244",
"k245",
"k246",
"k247",
"k248_1",
"k249",
"k250",
"k251",
"k252_1",
"k253_1",
"k253_2",
"k253_3",
"k253_4",
"k254_1",
"k255_1",
"k256_1",
"k257",
"k258",
"k259_1",
"k260_1",
"k261_1",
"k262",
"k263_1",
"k264_1",
"k264_2",
"k264_3",
"k265_1",
"k265_2",
"k265_3",
"k266_1",
"k267_1",
"k267_2",
"k267_3",
"k268_1",
"k269_1",
"k270_1",
"k271_1",
"k272_1",
"k273_1",
"k274_1",
"k275_1",
"k276_1",
"k277_1",
"k278_1",
"k279_1",
"k280_1",
"k281_1",
"k282_1",
"k283_1",
"k284_1",
"k285_1",
"k286_1",
"k287_1",
"k288_1",
"k289_1",
"k290_1",
"k291_1",
"k292_1",
"k293_1",
"k294_1",
"k295_1",
"k296_1",
"k297_1",
"k298_1",
"k299_1",
"k300_1",
"k301_1",
"k302_1",
"k303_1",
"k304_1",
"k305_1",
"k306_1",
"k307_1",
"k308_1",
"k309_1",
"k310_1",
"k311_1",
"k312_1",
"k313_1",
"k314_1",
"k315_1",
"k316_1",
"k316_2",
"k316_3",
"k316_4",
"k316_5",
"k316_6",
"k317_1",
"k318",
"k319",
"k320_1",
"k320_2",
"k321_1",
"k321_2",
"k322",
"k323_1",
"k323_2",
"k324_1",
"k324_2",
"k325",
"k326",
"k327",
"k328",
"k329",
"k330_1",
"k330_2",
"k331_1",
"k331_2",
"k332",
"k333",
"k334",
"k335_1",
"k335_2",
"k336",
"k337_1",
"k337_2",
"k338",
"k339_1",
"k339_2",
"k340_1",
"k340_2",
"k341",
"k342",
"k343",
"k344_1",
"k344_2",
"k345",
"k346_1",
"k346_2",
"k346_3",
"k347_1",
"k347_2",
"k347_3",
"k348_1",
"k348_2",
"k349",
"k350",
"k351",
"k352_1",
"k352_2",
"k352_3",
"k353",
"k354",
"k355_1",
"k355_2",
"k355_3",
"k355_4",
"k356_1",
"k356_2",
"k356_3",
"k357",
"k358",
"k359",
"k360_1",
"k360_2",
"k361",
"k362_1",
"k362_2",
"k362_3",
"k363",
"k364_1",
"k364_2",
"k364_3",
"k365_1",
"k365_2",
"k366",
"k367",
"k368_1",
"k368_2",
"k369_1",
"k369_2",
"k370_1",
"k370_2",
"k370_3",
"k371",
"k372_1",
"k372_2",
"k373_1",
"k373_2",
"k374",
"k375",
"k376",
"k377",
"k378_1",
"k378_2",
"k378_3",
"k378_4",
"k379_1",
"k379_2",
"k379_3",
"k380",
"k381",
"k382",
"k383_1",
"k383_2",
"k384",
"k385_1",
"k385_2",
"k385_3",
"k385_4",
"k386",
"k387_1",
"k387_2",
"k387_3",
"k388_1",
"k388_2",
"k389",
"k390",
"k391",
"k392_1",
"k392_2",
"k393_1",
"k393_2",
"k394",
"k395",
"k396",
"k397_1",
"k397_2",
"k397_3",
"k397_4",
"k398_1",
"k398_2",
"k398_3",
"k399",
"k400",
"k401",
"k402_1",
"k402_2",
"k402_3",
"k403_1",
"k403_2",
"k404",
"k405",
"k406_1",
"k406_2",
"k406_3",
"k407_1",
"k407_2",
"k408",
"k409",
"k410",
"k411",
"k412",
"k413",
"k414",
"k415",
"k416",
"k417",
"k418",
"k419",
"k420",
"k421",
"k422",
"k423",
"k424",
"k425",
"k426",
"k427",
"k428",
"k429",
"k430",
"k431",
"k432",
"k433",
"k434",
"k435",
"k436",
"k437",
"k438",
"k439",
"k440",
"k441",
"k442",
"k443",
"k444",
"k445",
"k446",
"k447",
"k448",
"k449",
"k450",
"k451",
"k452",
"k453",
"k454",
"k455",
"k456",
"k457",
"k458",
"k459",
"k460",
"k461",
"k462",
"k463",
"k464",
"k465",
"k466",
"k467",
"k468",
"k469",
"k470",
"k471",
"k472",
"k473",
"k474",
"k475",
"k476",
"k477",
"k478",
"k479",
"k480",
"k481",
"k482",
"k483",
"k484",
"k485",
"k486",
"k487",
"k488",
"k489",
"k490",
"k491",
"k492",
"k493",
"k494",
"k495",
"k496",
"k497",
"k498",
"k499",
"k500",
"k501",
"k502",
"k503",
"k504",
"k505",
"k506",
"k507",
"k508",
"k509",
"k510",
"k511",
"k512",
"k513",
"k514",
"k515",
"k516",
"k517",
"k518",
"k519",
"k520",
"k521",
"k522",
"k523",
"k524",
"k525",
"k526",
"k527",
"k528",
"k529",
"k530",
"k531",
"k532",
"k533",
"k534",
"k535",
"k536",
"k537",
"k538",
"k539",
"k540",
"k541",
"k542",
"k543",
"k544",
"k545",
"k546",
"k547",
"k548",
"k549",
"k550",
"k551",
"k552",
"k553",
"k554",
"k555",
"k556",
"k557",
"k558",
"k559",
"k560",
"k561",
"k562",
"k563",
"k564",
"k565",
"k566",
"k567",
"k568",
"k569",
"k570",
"k571",
"k572",
"k573",
"k574",
"k575",
"k576",
"k577",
"k578",
"k579",
"k580",
"k581",
"k582",
"k583",
"k584",
"k585",
"k586",
"k587",
"k588",
"k589",
"k590",
"k591",
"k592",
"k593",
"k594",
"k595",
"k596",
"k597",
"k598",
"k599",
"k600",
"k601",
"k602",
"k603",
"k604",
"k605",
"k606",
"k607",
"k608",
"k609",
"k610",
"k611",
"k612",
"k613",
"k614",
"k615",
"k616",
"k617",
"k618",
"k619",
"k620",
"k621",
"k622",
"k623",
"k624",
"k625",
"k626",
"k627",
"k628",
"k629",
"k630",
"k631",
"k632",
"k633",
"k634",
"k635",
"k636",
"k637",
"k638",
"k639",
"k640",
"k641",
"k642",
"k643",
"k644",
"k645",
"k646",
"k647",
"k648",
"k649",
"k650",
"k651",
"k652",
"k653",
"k654",
"k655",
"k656",
"k657",
"k658",
"k659",
"k660",
"k661",
"k662",
"k663",
"k664",
"k665",
"k666",
"k667",
"k668",
"k669",
"k670",
"k671",
"k672",
"k673",
"k674",
"k675",
"k676",
"k677",
"k678",
"k679",
"k680",
"k681",
"k682",
"k683",
"k684",
"k685",
"k686",
"k687",
"k688",
"k689",
"k690",
"k691",
"k692",
"k693",
"k694",
"k695",
"k696",
"k697",
"k698",
"k699",
"k700",
"k701",
"k702",
"k703",
"k704",
"k705",
"k706",
"k707",
"k708",
"k709",
"k710",
"k711",
"k712",
"k713",
"k714",
"k715",
"k716",
"k717",
"k718",
"k719",
"k720",
"k721",
"k722",
"k723",
"k724",
"k725",
"k726",
"k727",
"k728",
"k729",
"k730",
"k731",
"k732",
"k733",
"k734",
"k735",
"k736",
"k737",
"k738",
"k739",
"k740",
"k741",
"k742",
"k743",
"k744",
"k745",
"k746",
"k747",
"k748",
"k749",
"k750",
"k751",
"k752",
"k753",
"k754",
"k755",
"k756",
"k757",
"k758",
"k759",
"k760",
"k761",
"k762",
"k763",
"k764",
"k765",
"k766",
"k767",
"k768",
"k769",
"k770",
"k771",
"k772",
"k773",
"k774",
"k775",
"k776",
"k777",
"k778",
"k779",
"k780",
"k781",
"k782_1",
"k782_2",
"k782_3",
"k783_1",
"k783_2",
"k783_3",
"k784_1",
"k784_2",
"k784_3",
"k785_1",
"k785_2",
"k785_3",
"k786_1",
"k786_2",
"k786_3",
"k787_1",
"k787_2",
"k787_3",
"k788_1",
"k788_2",
"k788_3",
"k789_1",
"k789_2",
"k789_3",
"k790_1",
"k790_2",
"k790_3",
"k791_1",
"k791_2",
"k791_3",
"k792_1",
"k792_2",
"k792_3",
"k793_1",
"k793_2",
"k793_3",
"k794_1",
"k794_2",
"k794_3",
"k795_1",
"k795_2",
"k795_3",
"k796_1",
"k796_2",
"k796_3",
"k797_1",
"k797_2",
"k797_3",
"k798_1",
"k798_2",
"k798_3",
"k799_1",
"k799_2",
"k799_3",
"k800_1",
"k800_2",
"k800_3",
"k801_1",
"k801_2",
"k801_3",
"k802_1",
"k802_2",
"k802_3",
"k803_1",
"k803_2",
"k803_3",
"k804_1",
"k804_2",
"k804_3",
"k805_1",
"k805_2",
"k805_3",
"k806_1",
"k806_2",
"k806_3",
"k807_1",
"k807_2",
"k807_3",
"k808_1",
"k808_2",
"k808_3",
"k809_1",
"k809_2",
"k809_3",
"k810_1",
"k810_2",
"k810_3",
"k811",
"k812",
"k813",
"k814",
"k815",
"k816",
"k817",
"k818",
"k819",
"k820",
"k821",
"k822",
"k823",
"k824",
"k825",
"k826",
"k827",
"k828",
"k829",
"k830",
"k831",
"k832",
"k833",
"k834",
"k835",
"k836",
"k837",
"k838",
"k839",
"k840",
"k841",
"k842",
"k843",
"k844",
"k845",
"k846",
"k847",
"k848",
"k849",
"k850",
"k851",
"k852",
"k853",
"k854",
"k855",
"k856",
"k857",
"k858",
"k859",
"k860",
"k861",
"k862",
"k863",
"k864",
"k865",
"k866",
"k867",
"k868",
"k869",
"k870",
"k871",
"k872",
"k873",
"k874",
"k875",
"k876",
"k877",
"k878",
"k879",
"k880",
"k881",
"k882",
"k883",
"k884",
"k885",
"k886",
"k887",
"k888",
"k889",
"k890",
"k891",
"k892",
"k893",
"k894",
"k895",
"k896",
"k897",
"k898",
"k899",
"k900",
"k901",
"k902",
"k903",
"k904",
"k905",
"k906",
"k907",
"k908",
"k909",
"k910",
"k911",
"k912",
"k913",
"k914",
"k915",
"k916",
"k917",
"k918",
"k919",
"k920",
"k921",
"k922",
"k923",
"k924",
"k925",
"k926",
"k927",
"k928",
"k929",
"k930",
"k931",
"k932",
"k933",
"k934",
"k935",
"k936",
"k937",
"k938",
"k939",
"k940",
"k941",
"k942",
"k943",
"k944",
"k945",
"k946",
"k947",
"k948",
"k949",
"k950",
"k951",
"k952",
"k953",
"k954",
"k955",
"k956",
"k957",
"k958",
"k959",
"k960",
"k961",
"k962",
"k963",
"k964",
"k965",
"k966",
"k967",
"k968",
"k969",
"k970",
"k971",
"k972",
"k973",
"k974",
"k975",
"k976",
"k977",
"k978",
"k979",
"k980",
"k981",
"k982",
"k983",
"k984",
"k985",
"k986",
"k987",
"k988",
"k989",
"k990",
"k991",
"k992",
"k993",
"k994",
"k995",
"k996",
"k997",
"k998",
"k999",
"k1000",
"k1001",
"k1002",
"k1003",
"k1004",
"k1005",
"k1006",
"k1007",
"k1008",
"k1009",
"k1010",
"k1011",
"k1012",
"k1013",
"k1014",
"k1015",
"k1016",
"k1017",
"k1018",
"k1019",
"k1020",
"k1021",
"k1022",
"k1023",
"k1024",
"k1025",
"k1026",
"k1027",
"k1028",
"k1029",
"k1030",
"k1031",
"k1032",
"k1033",
"k1034",
"k1035",
"k1036",
"k1037",
"k1038",
"k1039",
"k1040",
"k1041",
"k1042",
"k1043",
"k1044",
"k1045",
"k1046",
"k1047",
"k1048",
"k1049",
"k1050",
"k1051",
"k1052",
"k1053",
"k1054",
"k1055",
"k1056",
"k1057",
"k1058",
"k1059",
"k1060",
"k1061",
"k1062",
"k1063",
"k1064",
"k1065",
"k1066",
"k1067",
"k1068",
"k1069",
"k1070",
"k1071",
"k1072",
"k1073",
"k1074",
"k1075",
"k1076",
"k1077",
"k1078",
"k1079",
"k1080",
"k1081",
"k1082",
"k1083",
"k1084",
"k1085",
"k1086",
"k1087",
"k1088",
"k1089",
"k1090",
"k1091",
"k1092",
"k1093",
"k1094",
"k1095",
"k1096",
"k1097",
"k1098",
"k1099",
"k1100",
"k1101",
"k1102",
"k1103",
"k1104",
"k1105",
"k1106",
"k1107",
"k1108",
"k1109",
"k1110",
"k1111",
"k1112",
"k1113",
"k1114",
"k1115",
"k1116",
"k1117",
"k1118",
"k1119",
"k1120",
"k1121",
"k1122",
"k1123",
"k1124",
"k1125",
"k1126",
"k1127",
"k1128",
"k1129",
"k1130",
"k1131",
"k1132",
"k1133",
"k1134",
"k1135",
"k1136",
"k1137",
"k1138",
"k1139",
"k1140",
"k1141",
"k1142",
"k1143",
"k1144",
"k1145",
"k1146",
"k1147",
"k1148",
"k1149",
"k1150",
"k1151",
"k1152",
"k1153",
"k1154",
"k1155",
"k1156",
"k1157",
"k1158",
"k1159",
"k1160",
"k1161",
"k1162",
"k1163",
"k1164",
"k1165",
"k1166",
"k1167",
"k1168",
"k1169",
"k1170",
"k1171",
"k1172",
"k1173",
"k1174",
"k1175",
"k1176",
"k1177",
"k1178",
"k1179",
"k1180",
"k1181",
"k1182",
"k1183",
"k1184",
"k1185",
"k1186",
"k1187",
"k1188",
"k1189",
"k1190",
"k1191",
"k1192",
"k1193",
"k1194",
"k1195",
"k1196",
"k1197",
"k1198",
"k1199",
"k1200",
"k1201",
"k1202",
"k1203",
"k1204",
"k1205",
"k1206",
"k1207",
"k1208",
"k1209",
"k1210",
"k1211",
"k1212",
"k1213",
"k1214",
"k1215",
"k1216",
"k1217",
"k1218",
"k1219",
"k1220",
"k1221",
"k1222",
"k1223",
"k1224",
"k1225",
"k1226",
"k1227",
"k1228",
"k1229",
"k1230",
"k1231",
"k1232",
"k1233",
"k1234",
"k1235",
"k1236",
"k1237",
"k1238",
"k1239",
"k1240",
"k1241",
"k1242",
"k1243",
"k1244",
"k1245",
"k1246",
"k1247",
"k1248",
"k1249",
"k1250",
"k1251",
"k1252",
"k1253",
"k1254",
"k1255",
"k1256",
"k1257",
"k1258",
"k1259",
"k1260",
"k1261",
"k1262",
"k1263",
"k1264",
"k1265",
"k1266",
"k1267",
"k1268",
"k1269",
"k1270",
"k1271",
"k1272",
"k1273",
"k1274",
"k1275",
"k1276",
"k1277",
"k1278",
"k1279",
"k1280",
"k1281",
"k1282",
"k1283",
"k1284",
"k1285",
"k1286",
"k1287",
"k1288",
"k1289",
"k1290",
"k1291",
"k1292",
"k1293",
"k1294",
"k1295",
"k1296",
"k1297",
"k1298",
"k1299",
"k1300",
"k1301",
"k1302",
"k1303",
"k1304",
"k1305",
"k1306",
"k1307",
"k1308",
"k1309",
"k1310",
"k1311",
"k1312",
"k1313",
"k1314",
"k1315",
"k1316",
"k1317",
"k1318",
"k1319",
"k1320",
"k1321",
"k1322",
"k1323",
"k1324",
"k1325",
"k1326",
"k1327",
"k1328",
"k1329",
"k1330",
"k1331",
"k1332",
"k1333",
"k1334",
"k1335",
"k1336",
"k1337",
"k1338",
"k1339",
"k1340",
"k1341",
"k1342",
"k1343",
"k1344",
"k1345",
"k1346",
"k1347",
"k1348",
"k1349",
"k1350",
"k1351",
"k1352",
"k1353",
"k1354",
"k1355",
"k1356",
"k1357",
"k1358",
"k1359",
"k1360",
"k1361",
"k1362",
"k1363",
"k1364",
"k1365",
"k1366",
"k1367",
"k1368",
"k1369",
"k1370",
"k1371",
"k1372",
"k1373",
"k1374",
"k1375",
"k1376",
"k1377",
"k1378",
"k1379",
"k1380",
"k1381",
"k1382",
"k1383",
"k1384",
"k1385",
"k1386",
"k1387",
"k1388",
"k1389",
"k1390",
"k1391",
"k1392",
"k1393",
"k1394",
"k1395",
"k1396",
"k1397",
"k1398",
"k1399",
"k1400",
"k1401",
"k1402",
"k1403",
"k1404",
"k1405",
"k1406",
"k1407",
"k1408",
"k1409",
"k1410",
"k1411",
"k1412",
"k1413",
"k1414",
"k1415",
"k1416",
"k1417",
"k1418",
"k1419",
"k1420",
"k1421",
"k1422",
"k1423",
"k1424",
"k1425",
"k1426",
"k1427",
"k1428",
"k1429",
"k1430",
"k1431",
"k1432",
"k1433",
"k1434",
"k1435",
"k1436",
"k1437",
"k1438",
"k1439",
"k1440",
"k1441",
"k1442",
"k1443",
"k1444",
"k1445",
"k1446",
"k1447",
"k1448",
"k1449",
"k1450",
"k1451",
"k1452",
"k1453",
"k1454",
"k1455",
"k1456",
"k1457",
"k1458",
"k1459",
"k1460",
"k1461",
"k1462",
"k1463",
"k1464",
"k1465",
"k1466",
"k1467",
"k1468",
"k1469",
"k1470",
"k1471",
"k1472",
"k1473",
"k1474",
"k1475",
"k1476",
"k1477",
"k1478",
"k1479",
"k1480",
"k1481",
"k1482",
"k1483",
"k1484",
"k1485",
"k1486",
"k1487",
"k1488",
"k1489",
"k1490",
"k1491",
"k1492",
"k1493",
"k1494",
"k1495",
"k1496",
"k1497",
"k1498",
"k1499",
"k1500",
"k1501",
"k1502",
"k1503",
"k1504",
"k1505",
"k1506",
"k1507",
"k1508",
"k1509",
"k1510",
"k1511",
"k1512",
"k1513",
"k1514",
"k1515",
"k1516",
"k1517",
"k1518",
"k1519",
"k1520",
"k1521",
"k1522",
"k1523",
"k1524",
"k1525",
"k1526",
"k1527",
"k1528",
"k1529",
"k1530",
"k1531",
"k1532",
"k1533",
"k1534",
"k1535",
"k1536",
"k1537",
"k1538",
"k1539",
"k1540",
"k1541",
"k1542",
"k1543",
"k1544",
"k1545",
"k1546",
"k1547",
"k1548",
"k1549",
"k1550",
"k1551",
"k1552",
"k1553",
"k1554",
"k1555",
"k1556",
"k1557",
"k1558",
"k1559",
"k1560",
"k1561",
"k1562",
"k1563",
"k1564",
"k1565",
"k1566",
"k1567",
"k1568",
"k1569",
"k1570",
"k1571",
"k1572",
"k1573",
"k1574",
"k1575",
"k1576",
"k1577",
"k1578",
"k1579",
"k1580",
"k1581",
"k1582",
"k1583",
"k1584",
"k1585",
"k1586",
"k1587",
"k1588",
"k1589",
"k1590",
"k1591",
"k1592",
"k1593",
"k1594",
"k1595",
"k1596",
"k1597",
"k1598",
"k1599",
"k1600",
"k1601",
"k1602",
"k1603",
"k1604",
"k1605",
"k1606",
"k1607",
"k1608",
"k1609",
"k1610",
"k1611",
"k1612",
"k1613",
"k1614",
"k1615",
"k1616",
"k1617",
"k1618",
"k1619",
"k1620",
"k1621",
"k1622",
"k1623",
"k1624",
"k1625",
"k1626",
"k1627",
"k1628",
"k1629",
"k1630",
"k1631",
"k1632",
"k1633",
"k1634",
"k1635",
"k1636",
"k1637",
"k1638",
"k1639",
"k1640",
"k1641",
"k1642",
"k1643",
"k1644",
"k1645",
"k1646",
"k1647",
"k1648",
"k1651",
"k1652",
"k1653",
"k1654",
"k1655",
"k1656",
"k1657",
"k1658",
"k1659",
"k1660",
"k1661",
"k1662",
"k1663",
"k1664",
"k1665",
"k1666",
"k1667",
"k1668",
"k1669",
"k1670",
"k1671",
"k1672",
"k1673",
"k1674",
"k1675",
"k1676",
"k1677",
"k1678",
"k1679",
"k1680",
"k1681",
"k1682",
"k1683",
"k1684",
"k1685",
"k1686",
"k1687",
"k1688",
"k1689",
"k1690",
"k1691",
"k1692",
"k1693",
"k1694",
"k1695",
"k1696",
"k1697",
"k1698",
"k1699",
"k1700",
"k1701",
"k1702",
"k1703",
"k1704",
"k1705",
"k1706",
"k1707",
"k1708",
"k1709",
"k1710",
"k1711",
"k1712",
"k1713",
"k1714",
"k1715",
"k1716",
"k1717",
"k1718",
"k1719",
"k1720",
"k1721",
"k1722",
"k1723",
"k1724",
"k1725",
"k1726",
"k1727",
"k1728",
"k1729",
"k1730",
"k1731",
"k1732",
"k1733",
"k1734",
"k1735",
"k1736",
"k1737",
"k1738",
"k1739",
"k1740",
"k1741",
"k1742",
"k1743",
"k1744",
"k1745",
"k1746",
"k1747",
"k1748",
"k1749",
"k1750",
"k1751",
"k1752",
"k1753",
"k1754",
"k1755",
"k1756",
"k1757",
"k1758",
"k1759",
"k1760",
"k1761",
"k1762",
"k1763",
"k1764",
"k1765",
"k1766_1",
"k1766_2",
"k1766_3",
"k1769",
"k1770",
"k1771",
"k1772",
"k1773",
"k1774",
"k1775",
"k1776",
"k1777",
"k1778",
"k1779",
"k1780",
"k1781",
"k1782",
"k1783",
"k1784",
"k1785_1",
"k1785_2",
"k1785_3",
"k1786",
"k1787",
"k1788",
"k1789",
"k1790",
"k1791",
"k1792",
"k1793",
"k1794",
"k1795",
"k1796",
"k1797",
"k1798",
"k1799",
"k1800",
"k1801",
"k1802",
"k1803",
"k1804",
"k1805",
"k1806",
"k1807",
"k1808",
"k1809",
"k1810",
"k1811_1",
"k1812_1",
"k1813",
"k1814",
"k1815",
"k1816",
"k1817",
"k1818",
"k1819",
"k1820",
"k1821",
"k1822",
"k1823",
"k1824",
"k1825",
"k1826",
"k1827",
"k1828",
"k1829",
"k1830",
"k1831",
"k1832",
"k1833",
"k1834",
"k1835",
"k1836",
"k1837",
"k1838",
"k1839",
"k1840",
"k1841",
"k1842",
"k1843",
"k1844",
"k1845",
"k1846",
"k1847",
"k1848",
"k1849",
"k1850",
"k1851",
"k1852",
"k1853",
"k1854",
"k1855",
"k1856",
"k1857",
"k1858",
"k1859",
"k1860",
"k1861",
"k1862",
"k1863",
"k1864",
"k1865",
"k1866",
"k1867",
"k1868",
"k1869",
"k1870",
"k1871",
"k1872",
"k1873",
"k1874",
"k1875",
"k1876",
"k1877",
"k1878",
"k1879",
"k1880",
"k1881",
"k1882",
"k1883",
"k1884",
"k1885",
"k1886",
"k1887",
"k1888",
"k1889",
"k1890",
"k1891",
"k1892",
"k1893",
"k1894",
"k1895",
"k1896",
"k1897",
"k1898",
"k1899",
"k1900",
"k1901",
"k1902",
"k1903",
"k1904",
"k1905",
"k1906",
"k1907",
"k1908",
"k1909",
"k1910",
"k1911",
"k1912",
"k1913",
"k1914",
"k1915",
"k1916",
"k1917",
"k1918",
"k1919",
"k1920",
"k1921",
"k1922",
"k1923",
"k1924",
"k1925",
"k1926",
"k1927",
"k1928",
"k1929",
"k1930",
"k1931",
"k1932",
"k1933",
"k1934",
"k1935",
"k1936",
"k1937",
"k1938",
"k1939",
"k1940",
"k1941",
"k1942",
"k1943",
"k1944",
"k1945",
"k1946",
"k1947",
"k1948",
"k1949",
"k1950",
"k1951",
"k1952",
"k1953",
"k1954",
"k1955",
"k1956",
"k1957",
"k1958",
"k1959",
"k1960",
"k1961",
"k1962",
"k1963",
"k1964",
"k1965",
"k1966",
"k1967",
"k1968",
"k1969",
"k1970",
"k1971",
"k1972",
"k1973",
"k1974",
"k1975",
"k1976",
"k1977",
"k1978",
"k1979",
"k1980",
"k1981",
"k1982",
"k1983",
"k1984",
"k1985",
"k1986",
"k1987",
"k1988",
"k1989",
"k1990",
"k1991",
"k1992",
"k1993",
"k1994",
"k1995",
"k1996",
"k1997",
"k1998",
"k1999",
"k2000",
"k2001",
"k2002",
"k2003",
"k2004",
"k2005",
"k2006",
"k2007",
"k2008",
"k2009",
"k2010",
"k2011",
"k2012",
"k2013",
"k2014",
"k2015",
"k2016",
"k2017",
"k2018",
"k2019",
"k2020",
"k2021",
"k2022",
"k2023",
"k2024",
"k2025",
"k2026",
"k2027",
"k2028",
"k2029",
"k2030",
"k2031",
"k2032",
"k2033",
"k2034",
"k2035",
"k2036",
"k2037",
"k2038",
"k2039",
"k2040",
"k2041",
"k2042",
"k2043",
"k2044",
"k2045",
"k2046",
"k2047",
"k2048",
"k2049",
"k2050",
"k2051",
"k2052",
"k2053",
"k2054",
"k2055",
"k2056",
"k2057",
"k2058",
"k2059",
"k2060",
"k2061",
"k2062",
"k2063",
"k2064",
"k2065",
"k2066",
"k2067",
"k2068",
"k2069",
"k2070",
"k2071",
"k2072",
"k2073",
"k2074",
"k2075",
"k2076",
"k2077",
"k2078",
"k2079",
"k2080",
"k2081",
"k2082",
"k2083",
"k2084",
"k2085",
"k2086",
"k2087",
"k2088",
"k2089",
"k2090",
"k2091",
"k2092",
"k2093",
"k2094",
"k2095",
"k2096",
"k2097",
"k2098",
"k2099",
"k2100",
"k2101",
"k2102",
"k2103",
"k2104",
"k2105",
"k2106",
"k2107",
"k2108",
"k2109",
"k2110",
"k2111",
"k2112",
"k2113",
"k2114",
"k2115",
"k2116",
"k2117",
"k2118",
"k2119",
"k2120",
"k2121",
"k2122",
"k2123",
"k2124",
"k2125",
"k2126",
"k2127",
"k2128",
"k2129",
"k2130",
"k2131",
"k2132",
"k2133",
"k2134",
"k2135",
"k2136",
"k2137",
"k2138",
"k2139",
"k2140",
"k2141",
"k2142",
"k2143",
"k2144",
"k2145",
"k2146",
"k2147",
"k2148",
"k2149",
"k2150",
"k2151",
"k2152",
"k2153",
"k2154",
"k2155",
"k2156",
"k2157",
"k2158",
"k2159",
"k2160",
"k2161",
"k2162",
"k2163",
"k2164",
"k2165",
"k2166",
"k2167",
"k2168",
"k2169",
"k2170",
"k2171",
"k2172",
"k2173",
"k2174",
"k2175",
"k2176",
"k2177",
"k2178",
"k2179",
"k2180",
"k2181",
"k2182",
"k2183",
"k2184",
"k2185",
"k2186",
"k2187",
"k2188",
"k2189",
"k2190",
"k2191",
"k2192",
"k2193",
"k2194",
"k2195",
"k2196",
"k2197",
"k2198",
"k2199",
"k2200",
"k2201",
"k2202",
"k2203",
"k2204",
"k2205",
"k2206",
"k2207",
"k2208",
"k2209",
"k2210",
"k2211",
"k2212",
"k2213",
"k2214",
"k2215",
"k2216",
"k2217",
"k2218",
"k2219",
"k2220",
"k2221",
"k2222",
"k2223",
"k2224",
"k2225",
"k2226",
"k2227",
"k2228",
"k2229",
"k2230",
"k2231",
"k2232",
"k2233",
"k2234",
"k2235",
"k2236",
"k2237",
"k2238",
"k2239",
"k2240",
"k2241",
"k2242",
"k2243",
"k2244",
"k2245",
"k2246",
"k2247",
"k2248",
"k2249",
"k2250",
"k2251",
"k2252",
"k2253",
"k2254",
"k2255",
"k2256",
"k2257",
"k2258",
"k2259",
"k2260",
"k2261",
"k2262",
"k2263",
"k2264",
"k2265",
"k2266",
"k2267",
"k2268",
"k2269",
"k2270",
"k2271",
"k2272",
"k2273",
"k2274",
"k2275",
"k2276",
"k2277",
"k2278",
"k2279",
"k2280",
"k2281",
"k2282",
"k2283",
"k2284",
"k2285",
"k2286",
"k2287",
"k2288",
"k2289",
"k2290",
"k2291",
"k2292",
"k2293",
"k2294",
"k2295",
"k2296",
"k2297",
"k2298",
"k2299",
"k2300",
"k2301",
"k2302",
"k2303",
"k2304",
"k2305",
"k2306",
"k2307",
"k2308",
"k2309",
"k2310",
"k2311",
"k2312",
"k2313",
"k2314",
"k2315",
"k2316",
"k2317",
"k2318",
"k2319",
"k2320",
"k2321",
"k2322",
"k2323",
"k2324",
"k2325",
"k2326",
"k2327",
"k2328",
"k2329",
"k2330",
"k2331",
"k2332",
"k2333",
"k2334",
"k2335",
"k2336",
"k2337",
"k2338",
"k2339",
"k2340",
"k2341",
"k2342",
"k2343",
"k2344",
"k2345",
"k2346",
"k2347",
"k2348",
"k2349",
"k2350",
"k2351",
"k2352",
"k2353",
"k2354",
"k2355",
"k2356",
"k2357",
"k2358",
"k2359",
"k2360",
"k2361",
"k2362",
"k2363",
"k2364",
"k2365",
"k2366",
"k2367",
"k2368",
"k2369",
"k2370",
"k2371",
"k2372",
"k2373",
"k2374",
"k2375",
"k2376",
"k2377",
"k2378",
"k2379",
"k2380",
"k2381",
"k2382",
"k2383",
"k2384",
"k2385",
"k2386",
"k2387",
"k2388",
"k2389",
"k2390",
"k2391",
"k2392",
"k2393",
"k2394",
"k2395",
"k2396",
"k2397",
"k2398",
"k2399",
"k2400",
"k2401",
"k2402",
"k2403",
"k2404",
"k2405",
"k2406",
"k2407",
"k2408",
"k2409",
"k2410",
"k2411",
"k2412",
"k2413",
"k2414",
"k2415",
"k2416",
"k2417",
"k2418",
"k2419",
"k2420",
"k2421",
"k2422",
"k2423",
"k2424",
"k2425",
"k2426",
"k2427",
"k2428",
"k2429",
"k2430",
"k2431",
"k2432",
"k2433",
"k2434",
"k2435",
"k2436",
"k2437",
"k2438",
"k2439",
"k2440",
"k2441",
"k2442",
"k2443",
"k2444",
"k2445",
"k2446",
"k2447",
"k2448",
"k2449",
"k29_1",
"k29_2",
"k30_1",
"k30_2",
"k31_1",
"k31_2",
"k32_1",
"k32_2",
"k1649",
"k1650",
"k1767",
"k1768",};
    }

    /**
     * @brief Get ids of the observables
     * @return the ids
     */
    virtual std::vector<std::string> getObservableIds() const override {
        return std::vector<std::string>{"actp53",
"phERK",
"egfLR",};
    }

    /**
     * @brief function indicating whether reinitialization of states depending on
     fixed parameters is permissible
     * @return flag inidication whether reinitialization of states depending on
     fixed parameters is permissible
     */
    virtual bool isFixedParameterStateReinitializationAllowed() const override {
        return true;
    }

    /**
     * @brief returns the amici version that was used to generate the model
     * @return ver amici version string
     */
    virtual const std::string getAmiciVersion() const override {
        return "0.10.13";
    }

    /**
     & @brief returns the amici version that was used to generate the model
     * @return commit amici git commit hash
     */
    virtual const std::string getAmiciCommit() const override {
        return "unknown";
    }

    virtual bool wasPythonGenerated() const override {
        return true;
    }
};

#endif /* _amici_TPL_MODELNAME_h */
